import discord
import re
import os
import asyncio
import json
from typing import Optional, List, Dict
import aiohttp

# --- C·∫§U H√åNH ---
KARUTA_ID = 646937666251915264
GEMINI_API_KEY = os.getenv('GEMINI_API_KEY')

class KVIHelper:
    def __init__(self, bot):
        self.bot = bot
        self.api_key = GEMINI_API_KEY
        self.http_session = None
        if not self.api_key:
            print("‚ö†Ô∏è [KVI] C·∫£nh b√°o: Kh√¥ng t√¨m th·∫•y GEMINI_API_KEY.")

    async def async_setup(self):
        """T·∫°o HTTP session sau khi bot s·∫µn s√†ng"""
        if not self.http_session or self.http_session.closed:
            self.http_session = aiohttp.ClientSession()
            print("‚úÖ [KVI] HTTP session ƒë√£ s·∫µn s√†ng.")

    def parse_karuta_embed(self, embed) -> Optional[Dict]:
        """Ph√¢n t√≠ch embed c·ªßa Karuta ƒë·ªÉ l·∫•y th√¥ng tin"""
        try:
            description = embed.description or ""
            print(f"[DEBUG] parse_karuta_embed: N·ªôi dung embed (500 k√Ω t·ª± ƒë·∫ßu):\n{description[:500]}...")

            # T√¨m t√™n nh√¢n v·∫≠t
            char_match = re.search(r"Character ¬∑ \*\*([^\*]+)\*\*", description)
            character_name = char_match.group(1).strip() if char_match else None
            print(f"[DEBUG] parse_karuta_embed: T√™n nh√¢n v·∫≠t = {character_name}")

            # T√¨m c√¢u h·ªèi trong d·∫•u ngo·∫∑c k√©p (h·ªó tr·ª£ c·∫£ " v√† ‚Äú ‚Äù)
            question_match = re.search(r'["‚Äú]([^"‚Äù]+)["‚Äù]', description)
            question = question_match.group(1).strip() if question_match else None
            print(f"[DEBUG] parse_karuta_embed: C√¢u h·ªèi = {question}")

            # T√¨m t·∫•t c·∫£ c√°c d√≤ng b·∫Øt ƒë·∫ßu b·∫±ng emoji 1Ô∏è‚É£-5Ô∏è‚É£
            choice_lines = re.findall(r'^(1Ô∏è‚É£|2Ô∏è‚É£|3Ô∏è‚É£|4Ô∏è‚É£|5Ô∏è‚É£)\s+(.+)$', description, re.MULTILINE)
            print(f"[DEBUG] parse_karuta_embed: S·ªë d√≤ng l·ª±a ch·ªçn t√¨m th·∫•y: {len(choice_lines)}")

            # Mapping emoji -> s·ªë
            emoji_to_number = {
                '1Ô∏è‚É£': 1, '2Ô∏è‚É£': 2, '3Ô∏è‚É£': 3, '4Ô∏è‚É£': 4, '5Ô∏è‚É£': 5
            }

            choices = []
            for emoji, text in choice_lines:
                if emoji in emoji_to_number:
                    choices.append({
                        "number": emoji_to_number[emoji],
                        "text": text.strip()
                    })

            print(f"[DEBUG] parse_karuta_embed: S·ªë l·ª±a ch·ªçn h·ª£p l·ªá: {len(choices)}")

            # Ki·ªÉm tra d·ªØ li·ªáu t·ªëi thi·ªÉu
            if not character_name:
                print("[DEBUG] parse_karuta_embed: TH·∫§T B·∫†I - Kh√¥ng t√¨m th·∫•y t√™n nh√¢n v·∫≠t")
                return None
                
            if not question:
                print("[DEBUG] parse_karuta_embed: TH·∫§T B·∫†I - Kh√¥ng t√¨m th·∫•y c√¢u h·ªèi")
                return None
                
            if len(choices) < 2:
                print(f"[DEBUG] parse_karuta_embed: TH·∫§T B·∫†I - Ch·ªâ c√≥ {len(choices)} l·ª±a ch·ªçn (c·∫ßn >=2)")
                return None

            print("[DEBUG] parse_karuta_embed: TH√ÄNH C√îNG - D·ªØ li·ªáu ƒë·∫ßy ƒë·ªß")
            return {"character": character_name, "question": question, "choices": choices}

        except Exception as e:
            print(f"‚ùå [PARSER] L·ªói: {e}")
            return None

    async def analyze_with_ai(self, character: str, question: str, choices: List[Dict]) -> Optional[Dict]:
        """Ph√¢n t√≠ch b·∫±ng Google Gemini"""
        if not self.api_key:
            return None

        if not self.http_session or self.http_session.closed:
            await self.async_setup()

        url = f"https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent?key={self.api_key}"

        choices_text = "\n".join([f"{c['number']}. {c['text']}" for c in choices])
        prompt = (
            f"Ph√¢n t√≠ch t√≠nh c√°ch '{character}' v√† tr·∫£ l·ªùi c√¢u h·ªèi: '{question}'\n"
            f"L·ª±a ch·ªçn:\n{choices_text}\n"
            f'JSON: {{"analysis":"ph√¢n t√≠ch ng·∫Øn","percentages":[{{"choice":1,"percentage":50}}]}}'
        )

        payload = {"contents": [{"parts": [{"text": prompt}]}]}

        try:
            async with self.http_session.post(url, json=payload, timeout=8) as response:
                if response.status == 200:
                    data = await response.json()
                    result_text = data["candidates"][0]["content"]["parts"][0]["text"]
                    result_text = result_text.strip().replace("```json", "").replace("```", "").strip()
                    return json.loads(result_text)
                else:
                    error_text = await response.text()
                    print(f"‚ùå [AI] L·ªói API ({response.status}): {error_text}")
                    return None
        except Exception as e:
            print(f"‚ùå [AI] L·ªói: {e}")
            return None

    async def create_suggestion_embed(self, kvi_data: Dict, ai_result: Dict) -> discord.Embed:
        """T·∫°o embed g·ª£i √Ω"""
        embed = discord.Embed(
            title="üéØ KVI Helper",
            color=0x00ff88,
            description=f"**{kvi_data['character']}**\n*{kvi_data['question']}*"
        )

        percentages = sorted(ai_result.get('percentages', []), key=lambda x: x.get('percentage', 0), reverse=True)

        # Mapping emoji theo s·ªë th·ª© t·ª±
        emoji_map = {1: '1Ô∏è‚É£', 2: '2Ô∏è‚É£', 3: '3Ô∏è‚É£', 4: '4Ô∏è‚É£', 5: '5Ô∏è‚É£'}
        available_choices = {c['number']: c['text'] for c in kvi_data['choices']}

        suggestions = []
        for item in percentages[:min(3, len(available_choices))]:
            choice_num = item.get('choice')
            percentage = item.get('percentage')
            if choice_num is None or percentage is None or choice_num not in available_choices:
                continue

            emoji = emoji_map.get(choice_num, f"{choice_num}Ô∏è‚É£")
            if percentage >= 50:
                suggestions.append(f"{emoji} **{percentage}%** ‚≠ê")
            else:
                suggestions.append(f"{emoji} {percentage}%")

        if suggestions:
            embed.add_field(name="üí° G·ª£i √Ω", value="\n".join(suggestions), inline=False)

        analysis = ai_result.get('analysis', '')[:80]
        if analysis:
            embed.add_field(name="üìù Ph√¢n t√≠ch", value=analysis, inline=False)

        embed.set_footer(text=f"ü§ñ Gemini AI ‚Ä¢ {len(available_choices)} l·ª±a ch·ªçn")
        return embed

    async def handle_kvi_message(self, message):
        print(f"\n[DEBUG] Step 1: Bot nh√¨n th·∫•y tin nh·∫Øn t·ª´ '{message.author.name}'.")

        # Ch·ªâ x·ª≠ l√Ω tin nh·∫Øn t·ª´ Karuta
        if message.author.id != KARUTA_ID:
            return

        # Ki·ªÉm tra c√≥ embed kh√¥ng - KH√îNG T·∫¢I L·∫†I TIN NH·∫ÆN
        if not message.embeds:
            print("[DEBUG] Step 2: TH·∫§T B·∫†I - Tin nh·∫Øn kh√¥ng c√≥ embed")
            return
        print(f"[DEBUG] Step 2: TH√ÄNH C√îNG - Tin nh·∫Øn c√≥ {len(message.embeds)} embed")

        embed = message.embeds[0]
        description = embed.description or ""
        
        # Ki·ªÉm tra ƒëi·ªÅu ki·ªán KVI ƒë∆°n gi·∫£n
        if "Your Affection Rating has" in description:
            print("[DEBUG] Step 3: TH·∫§T B·∫†I - Tin nh·∫Øn l√† Affection Rating, kh√¥ng ph·∫£i KVI")
            return
            
        if "1Ô∏è‚É£" not in description:
            print("[DEBUG] Step 3: TH·∫§T B·∫†I - Kh√¥ng t√¨m th·∫•y emoji l·ª±a ch·ªçn")
            return
            
        print("[DEBUG] Step 3: TH√ÄNH C√îNG - ƒê√¢y l√† c√¢u h·ªèi KVI h·ª£p l·ªá")

        # Ph√¢n t√≠ch embed
        kvi_data = self.parse_karuta_embed(embed)
        if not kvi_data:
            print("[DEBUG] Step 4: TH·∫§T B·∫†I - Ph√¢n t√≠ch embed th·∫•t b·∫°i")
            return
        print(f"[DEBUG] Step 4: TH√ÄNH C√îNG - Ph√¢n t√≠ch embed th√†nh c√¥ng - Character: {kvi_data['character']}")

        # G·ªçi AI ƒë·ªÉ ph√¢n t√≠ch
        print("[DEBUG] Step 6: G·ªçi AI ƒë·ªÉ ph√¢n t√≠ch...")
        ai_result = await self.analyze_with_ai(kvi_data["character"], kvi_data["question"], kvi_data["choices"])
        if not ai_result:
            print("[DEBUG] Step 6: TH·∫§T B·∫†I - AI ph√¢n t√≠ch th·∫•t b·∫°i")
            return

        # T·∫°o embed g·ª£i √Ω
        print("[DEBUG] Step 7: T·∫°o embed g·ª£i √Ω...")
        suggestion_embed = await self.create_suggestion_embed(kvi_data, ai_result)

        try:
            await message.channel.send(embed=suggestion_embed)
            print("[DEBUG] Step 8: TH√ÄNH C√îNG - G·ª≠i g·ª£i √Ω th√†nh c√¥ng!")
        except Exception as e:
            print(f"‚ùå [DEBUG] Step 8: TH·∫§T B·∫†I - L·ªói g·ª≠i tin nh·∫Øn: {e}")
