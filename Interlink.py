# main.py - Discord Bot with PostgreSQL + JSONBin.io for persistent token storage
import os
import json
import asyncio
import threading
import discord
import aiohttp
import requests
from discord.ext import commands
from flask import Flask, request
from dotenv import load_dotenv
from urllib.parse import urlparse
import time
from PIL import Image, ImageDraw
import io
import aiohttp

# Try to import psycopg2, fallback to JSONBin if not available
try:
    import psycopg2
    HAS_PSYCOPG2 = True
    print("‚úÖ psycopg2 imported successfully")
except ImportError:
    HAS_PSYCOPG2 = False
    print("‚ö†Ô∏è WARNING: psycopg2 not available, using JSONBin.io storage only")

# --- LOAD ENVIRONMENT VARIABLES ---
load_dotenv()
DISCORD_TOKEN = os.getenv('DISCORD_TOKEN')
CLIENT_ID = os.getenv('DISCORD_CLIENT_ID')
CLIENT_SECRET = os.getenv('DISCORD_CLIENT_SECRET')
DATABASE_URL = os.getenv('DATABASE_URL')

# JSONBin.io configuration
JSONBIN_API_KEY = os.getenv('JSONBIN_API_KEY')  # Th√™m v√†o .env file
JSONBIN_BIN_ID = os.getenv('JSONBIN_BIN_ID')    # Th√™m v√†o .env file

if not DISCORD_TOKEN:
    exit("L·ªñI: Kh√¥ng t√¨m th·∫•y DISCORD_TOKEN")
if not CLIENT_ID:
    exit("L·ªñI: Kh√¥ng t√¨m th·∫•y DISCORD_CLIENT_ID")
if not CLIENT_SECRET:
    exit("L·ªñI: Kh√¥ng t√¨m th·∫•y DISCORD_CLIENT_SECRET")

# Ki·ªÉm tra JSONBin config
if not JSONBIN_API_KEY or not JSONBIN_BIN_ID:
    print("‚ö†Ô∏è WARNING: JSONBin.io config not found, will create new bin if needed")

# --- RENDER CONFIGURATION ---
PORT = int(os.getenv('PORT', 5000))
RENDER_URL = os.getenv('RENDER_EXTERNAL_URL', f'http://127.0.0.1:{PORT}')
REDIRECT_URI = f'{RENDER_URL}/callback'

# --- JSONBIN.IO FUNCTIONS ---
class JSONBinStorage:
    def __init__(self):
        self.api_key = JSONBIN_API_KEY
        self.bin_id = JSONBIN_BIN_ID
        self.base_url = "https://api.jsonbin.io/v3"
        
    def _get_headers(self):
        """T·∫°o headers cho requests"""
        return {
            "Content-Type": "application/json",
            "X-Master-Key": self.api_key,
            "X-Access-Key": self.api_key
        }
    
    def create_bin(self, data=None):
        """T·∫°o bin m·ªõi n·∫øu ch∆∞a c√≥"""
        if data is None:
            data = {}
        
        try:
            response = requests.post(
                f"{self.base_url}/b",
                json=data,
                headers=self._get_headers()
            )
            
            if response.status_code == 200:
                result = response.json()
                self.bin_id = result['metadata']['id']
                print(f"‚úÖ Created new JSONBin: {self.bin_id}")
                print(f"üîë Add this to your .env: JSONBIN_BIN_ID={self.bin_id}")
                return self.bin_id
            else:
                print(f"‚ùå Failed to create bin: {response.text}")
                return None
        except Exception as e:
            print(f"‚ùå JSONBin create error: {e}")
            return None
    
    def read_data(self):
        """ƒê·ªçc d·ªØ li·ªáu t·ª´ JSONBin"""
        if not self.bin_id:
            print("‚ö†Ô∏è No bin ID, creating new bin...")
            self.create_bin()
            return {}
            
        try:
            response = requests.get(
                f"{self.base_url}/b/{self.bin_id}/latest",
                headers=self._get_headers()
            )
            
            if response.status_code == 200:
                data = response.json()
                return data.get('record', {})
            elif response.status_code == 404:
                print("‚ö†Ô∏è Bin not found, creating new one...")
                self.create_bin()
                return {}
            else:
                print(f"‚ùå Failed to read from JSONBin: {response.status_code}")
                return {}
        except Exception as e:
            print(f"‚ùå JSONBin read error: {e}")
            return {}
    
    def write_data(self, data):
        """Ghi d·ªØ li·ªáu v√†o JSONBin"""
        if not self.bin_id:
            print("‚ö†Ô∏è No bin ID, creating new bin...")
            if not self.create_bin(data):
                return False
        
        try:
            response = requests.put(
                f"{self.base_url}/b/{self.bin_id}",
                json=data,
                headers=self._get_headers()
            )
            
            if response.status_code == 200:
                print("‚úÖ Data saved to JSONBin successfully")
                return True
            else:
                print(f"‚ùå Failed to save to JSONBin: {response.status_code} - {response.text}")
                return False
        except Exception as e:
            print(f"‚ùå JSONBin write error: {e}")
            return False
    
    def get_user_token(self, user_id):
        """L·∫•y token c·ªßa user t·ª´ JSONBin"""
        data = self.read_data()
        user_data = data.get(str(user_id))
        
        if isinstance(user_data, dict):
            return user_data.get('access_token')
        return user_data
    
    def save_user_token(self, user_id, access_token, username=None, avatar_hash=None):
        """L∆∞u token c·ªßa user v√†o JSONBin"""
        data = self.read_data()
        
        data[str(user_id)] = {
            'access_token': access_token,
            'username': username,
            'avatar_hash': avatar_hash,
            'updated_at': str(time.time())
        }
        
        return self.write_data(data)

    def delete_user(self, user_id):
        """X√≥a m·ªôt user kh·ªèi JSONBin"""
        data = self.read_data()
        if str(user_id) in data:
            del data[str(user_id)]
            return self.write_data(data)
        return True # Tr·∫£ v·ªÅ True n·∫øu user kh√¥ng t·ªìn t·∫°i s·∫µn

# Kh·ªüi t·∫°o JSONBin storage
jsonbin_storage = JSONBinStorage()

# --- DATABASE SETUP ---
def init_database():
    """Kh·ªüi t·∫°o database v√† t·∫°o b·∫£ng n·∫øu ch∆∞a c√≥"""
    if not DATABASE_URL or not HAS_PSYCOPG2:
        print("‚ö†Ô∏è WARNING: Kh√¥ng c√≥ DATABASE_URL ho·∫∑c psycopg2, s·ª≠ d·ª•ng JSONBin.io")
        return False
    
    try:
        conn = psycopg2.connect(DATABASE_URL, sslmode='require')
        cursor = conn.cursor()
        
        # T·∫°o b·∫£ng user_tokens n·∫øu ch∆∞a c√≥
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS user_tokens (
                user_id VARCHAR(50) PRIMARY KEY,
                access_token TEXT NOT NULL,
                username VARCHAR(100),
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        
        conn.commit()
        cursor.close()
        conn.close()
        print("‚úÖ Database initialized successfully")
        return True
        
    except Exception as e:
        print(f"‚ùå Database connection failed: {e}")
        print("üîÑ Falling back to JSONBin.io storage")
        return False

# --- DATABASE FUNCTIONS ---
def get_db_connection():
    """T·∫°o connection t·ªõi database"""
    if DATABASE_URL and HAS_PSYCOPG2:
        try:
            return psycopg2.connect(DATABASE_URL, sslmode='require')
        except Exception as e:
            print(f"Database connection error: {e}")
            return None
    return None

def get_user_access_token_db(user_id: str):
    """L·∫•y access token t·ª´ database"""
    conn = get_db_connection()
    if conn:
        try:
            cursor = conn.cursor()
            cursor.execute("SELECT access_token FROM user_tokens WHERE user_id = %s", (user_id,))
            result = cursor.fetchone()
            cursor.close()
            conn.close()
            return result[0] if result else None
        except Exception as e:
            print(f"Database error: {e}")
            if conn:
                conn.close()
    return None

def save_user_token_db(user_id: str, access_token: str, username: str = None, avatar_hash: str = None):
    """L∆∞u access token v√†o database"""
    conn = get_db_connection()
    if conn:
        try:
            cursor = conn.cursor()
            cursor.execute('''
                INSERT INTO user_tokens (user_id, access_token, username, avatar_hash) 
                VALUES (%s, %s, %s, %s)
                ON CONFLICT (user_id) 
                DO UPDATE SET 
                    access_token = EXCLUDED.access_token,
                    username = EXCLUDED.username,
                    avatar_hash = EXCLUDED.avatar_hash,
                    updated_at = CURRENT_TIMESTAMP
            ''', (user_id, access_token, username, avatar_hash))
            conn.commit()
            cursor.close()
            conn.close()
            print(f"‚úÖ Saved token for user {user_id} to database")
            return True
        except Exception as e:
            print(f"Database error: {e}")
            if conn:
                conn.close()
    return False

# --- FALLBACK JSON FUNCTIONS (kept for compatibility) ---
def get_user_access_token_json(user_id: str):
    """Backup: L·∫•y token t·ª´ file JSON"""
    try:
        with open('tokens.json', 'r') as f:
            tokens = json.load(f)
            data = tokens.get(str(user_id))
            if isinstance(data, dict):
                return data.get('access_token')
            return data
    except (FileNotFoundError, json.JSONDecodeError):
        return None

def save_user_token_json(user_id: str, access_token: str, username: str = None, avatar_hash: str = None):
    """Backup: L∆∞u token v√†o file JSON"""
    try:
        try:
            with open('tokens.json', 'r') as f:
                tokens = json.load(f)
        except (FileNotFoundError, json.JSONDecodeError):
            tokens = {}
        
        tokens[user_id] = {
            'access_token': access_token,
            'username': username,
            'avatar_hash': avatar_hash,
            'updated_at': str(time.time())
        }
        
        with open('tokens.json', 'w') as f:
            json.dump(tokens, f, indent=4)
        print(f"‚úÖ Saved token for user {user_id} to JSON file")
        return True
    except Exception as e:
        print(f"JSON file error: {e}")
        return False

# --- UNIFIED TOKEN FUNCTIONS ---
def get_user_access_token(user_id: int):
    """L·∫•y access token (∆Øu ti√™n: Database > JSONBin.io > JSON file)"""
    user_id_str = str(user_id)
    
    # Try database first
    token = get_user_access_token_db(user_id_str)
    if token:
        return token
    
    # Try JSONBin.io
    if JSONBIN_API_KEY:
        token = jsonbin_storage.get_user_token(user_id_str)
        if token:
            return token
    
    # Fallback to JSON file (for local development)
    return get_user_access_token_json(user_id_str)

def save_user_token(user_id: str, access_token: str, username: str = None, avatar_hash: str = None):
    """L∆∞u access token (Database + JSONBin.io + JSON backup)"""
    success_db = save_user_token_db(user_id, access_token, username, avatar_hash)
    success_jsonbin = False
    success_json = False
    
    # Try JSONBin.io
    if JSONBIN_API_KEY:
        success_jsonbin = jsonbin_storage.save_user_token(user_id, access_token, username, avatar_hash)
    
    # Local JSON backup (for development)
    success_json = save_user_token_json(user_id, access_token, username, avatar_hash)
    
    return success_db or success_jsonbin or success_json

def delete_user_from_db(user_id: str):
    """X√≥a user kh·ªèi database"""
    conn = get_db_connection()
    if conn:
        try:
            cursor = conn.cursor()
            cursor.execute("DELETE FROM user_tokens WHERE user_id = %s", (user_id,))
            conn.commit()
            cursor.close()
            conn.close()
            print(f"‚úÖ Deleted user {user_id} from database")
            return True
        except Exception as e:
            print(f"Database delete error: {e}")
            if conn:
                conn.close()
    return False

def delete_user_from_json(user_id: str):
    """X√≥a user kh·ªèi file JSON"""
    try:
        with open('tokens.json', 'r') as f:
            tokens = json.load(f)

        if user_id in tokens:
            del tokens[user_id]
            with open('tokens.json', 'w') as f:
                json.dump(tokens, f, indent=4)
            print(f"‚úÖ Deleted user {user_id} from JSON file")
        return True
    except (FileNotFoundError, json.JSONDecodeError):
        return True # File kh√¥ng t·ªìn t·∫°i coi nh∆∞ ƒë√£ x√≥a
    except Exception as e:
        print(f"JSON file delete error: {e}")
        return False
        
# --- DISCORD BOT SETUP ---
intents = discord.Intents.default()
intents.members = True
intents.message_content = True
bot = commands.Bot(command_prefix='!', intents=intents, owner_id=1391659740492337193, help_command=None)

# --- FLASK WEB SERVER SETUP ---
app = Flask(__name__)

# --- UTILITY FUNCTIONS ---
async def add_member_to_guild(guild_id: int, user_id: int, access_token: str):
    """Th√™m member v√†o guild s·ª≠ d·ª•ng Discord API tr·ª±c ti·∫øp"""
    url = f"https://discord.com/api/v10/guilds/{guild_id}/members/{user_id}"
    headers = {
        "Authorization": f"Bot {DISCORD_TOKEN}",
        "Content-Type": "application/json"
    }
    data = {
        "access_token": access_token
    }
    
    async with aiohttp.ClientSession() as session:
        async with session.put(url, headers=headers, json=data) as response:
            if response.status == 201:
                return True, "Th√™m th√†nh c√¥ng"
            elif response.status == 204:
                return True, "User ƒë√£ c√≥ trong server"
            else:
                error_text = await response.text()
                return False, f"HTTP {response.status}: {error_text}"
                
# --- INTERACTIVE UI COMPONENTS ---

# L·ªõp n√†y ƒë·ªãnh nghƒ©a giao di·ªán l·ª±a ch·ªçn server
class ServerSelectView(discord.ui.View):
    def __init__(self, author: discord.User, target_user: discord.User, guilds: list[discord.Guild]):
        super().__init__(timeout=300)
        self.author = author
        self.target_user = target_user
        self.guilds = guilds
        self.selected_guild_ids = set()

        # Chia danh s√°ch server th√†nh c√°c ph·∫ßn nh·ªè, m·ªói ph·∫ßn t·ªëi ƒëa 25
        guild_chunks = [self.guilds[i:i + 25] for i in range(0, len(self.guilds), 25)]
        
        # T·∫°o m·ªôt menu cho m·ªói ph·∫ßn
        for index, chunk in enumerate(guild_chunks):
            self.add_item(self.create_server_select(chunk, index, len(guild_chunks)))

    def create_server_select(self, guild_chunk: list[discord.Guild], page_index: int, total_pages: int):
        options = [discord.SelectOption(label=g.name, value=str(g.id)) for g in guild_chunk]
        placeholder = f"Ch·ªçn server (Trang {page_index + 1}/{total_pages})"
        
        select = discord.ui.Select(
            placeholder=placeholder,
            options=options,
            min_values=1,
            max_values=len(options)
        )
        
        async def callback(interaction: discord.Interaction):
            if interaction.user.id != self.author.id:
                return await interaction.response.send_message("B·∫°n kh√¥ng c√≥ quy·ªÅn t∆∞∆°ng t√°c.", ephemeral=True)
            
            # C·∫≠p nh·∫≠t t·∫≠p h·ª£p c√°c ID ƒë√£ ch·ªçn
            ids_in_this_menu = {int(opt.value) for opt in select.options}
            self.selected_guild_ids.difference_update(ids_in_this_menu)
            for gid in interaction.data["values"]:
                self.selected_guild_ids.add(int(gid))

            await interaction.response.send_message(f"‚úÖ ƒê√£ c·∫≠p nh·∫≠t! Hi·ªán ƒë√£ ch·ªçn **{len(self.selected_guild_ids)}** server.", ephemeral=True)

        select.callback = callback
        return select

    @discord.ui.button(label="Summon", style=discord.ButtonStyle.green, emoji="‚ú®")
    async def summon_button(self, interaction: discord.Interaction, button: discord.ui.Button):
        if interaction.user.id != self.author.id:
            return await interaction.response.send_message("B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng n√∫t n√†y.", ephemeral=True)
        
        if not self.selected_guild_ids:
            return await interaction.response.send_message("B·∫°n ch∆∞a ch·ªçn server n√†o c·∫£!", ephemeral=True)

        for item in self.children:
            item.disabled = True
        await interaction.response.edit_message(view=self)
        
        await interaction.followup.send(f"‚úÖ ƒê√£ nh·∫≠n l·ªánh! B·∫Øt ƒë·∫ßu m·ªùi **{self.target_user.name}** v√†o **{len(self.selected_guild_ids)}** server ƒë√£ ch·ªçn...")

        access_token = get_user_access_token(self.target_user.id)
        if not access_token:
            await interaction.followup.send(f"‚ùå Ng∆∞·ªùi d√πng **{self.target_user.name}** ch∆∞a ·ªßy quy·ªÅn cho bot.")
            return

        success_count, fail_count = 0, 0
        for guild_id in self.selected_guild_ids:
            success, message = await add_member_to_guild(guild_id, self.target_user.id, access_token)
            if success:
                success_count += 1
            else:
                fail_count += 1
        
        embed = discord.Embed(title=f"üìä K·∫øt qu·∫£ m·ªùi {self.target_user.name}", color=0x00ff00)
        embed.add_field(name="‚úÖ Th√†nh c√¥ng", value=f"{success_count} server", inline=True)
        embed.add_field(name="‚ùå Th·∫•t b·∫°i", value=f"{fail_count} server", inline=True)
        await interaction.followup.send(embed=embed)

# Roster
class RosterPages(discord.ui.View):
    def __init__(self, agents, ctx):
        super().__init__(timeout=180)  # Menu s·∫Ω t·ª± ƒë·ªông t·∫Øt sau 180 gi√¢y
        self.agents = agents
        self.ctx = ctx
        self.current_page = 0
        self.items_per_page = 6  # Hi·ªÉn th·ªã 6 ƒëi·ªáp vi√™n m·ªói trang
        self.total_pages = (len(self.agents) + self.items_per_page - 1) // self.items_per_page
        self.message = None

    async def create_page_embed(self, page_num):
        """T·∫°o Embed v√† ·∫£nh gh√©p cho m·ªôt trang c·ª• th·ªÉ."""
        start_index = page_num * self.items_per_page
        end_index = start_index + self.items_per_page
        page_agents = self.agents[start_index:end_index]

        if not page_agents:
            return discord.Embed(title="L·ªói", description="Kh√¥ng c√≥ d·ªØ li·ªáu cho trang n√†y."), None

        # --- Logic t·∫°o ·∫£nh gh√©p cho trang hi·ªán t·∫°i (ƒê√É S·ª¨A) ---
        avatar_size = 128
        padding = 10
        
        canvas = Image.new('RGBA', ((avatar_size + padding) * len(page_agents) + padding, avatar_size + padding * 2), (44, 47, 51, 255))
        current_x = padding
        
        # S·ª≠ d·ª•ng aiohttp ƒë·ªÉ t·∫£i ·∫£nh b·∫•t ƒë·ªìng b·ªô
        async with aiohttp.ClientSession() as session:
            for agent in page_agents:
                if agent.get('avatar_hash'):
                    avatar_url = f"https://cdn.discordapp.com/avatars/{agent['id']}/{agent['avatar_hash']}.png?size=128"
                    try:
                        async with session.get(avatar_url) as response:
                            if response.status == 200:
                                avatar_data = await response.read()
                                avatar_img = Image.open(io.BytesIO(avatar_data)).convert("RGBA")
                                canvas.paste(avatar_img, (current_x, padding))
                            else:
                                print(f"Failed to load avatar for {agent['id']}: HTTP {response.status}")
                    except Exception as e:
                        print(f"Could not load avatar for {agent['id']}: {e}")
                current_x += avatar_size + padding
        
        buffer = io.BytesIO()
        canvas.save(buffer, 'PNG')
        buffer.seek(0)
        discord_file = discord.File(buffer, filename=f"roster_page_{page_num}.png")
        # --- K·∫øt th√∫c logic t·∫°o ·∫£nh ---

        description_list = [f"üë§ **{agent['username']}** `(ID: {agent['id']})`" for agent in page_agents]
        description_text = "\n".join(description_list)

        embed = discord.Embed(
            title=f"AGENT ROSTER ({len(self.agents)} Active)",
            description=description_text,
            color=discord.Color.dark_grey()
        )
        embed.set_image(url=f"attachment://roster_page_{page_num}.png")
        embed.set_footer(text=f"Trang {self.current_page + 1}/{self.total_pages}")
        
        return embed, discord_file
        
        buffer = io.BytesIO()
        canvas.save(buffer, 'PNG')
        buffer.seek(0)
        discord_file = discord.File(buffer, filename=f"roster_page_{page_num}.png")
        # --- K·∫øt th√∫c logic t·∫°o ·∫£nh ---

        description_list = [f"üë§ **{agent['username']}** `(ID: {agent['id']})`" for agent in page_agents]
        description_text = "\n".join(description_list)

        embed = discord.Embed(
            title=f"AGENT ROSTER ({len(self.agents)} Active)",
            description=description_text,
            color=discord.Color.dark_grey()
        )
        embed.set_image(url=f"attachment://roster_page_{page_num}.png")
        embed.set_footer(text=f"Trang {self.current_page + 1}/{self.total_pages}")
        
        return embed, discord_file

    async def update_buttons(self):
        """C·∫≠p nh·∫≠t tr·∫°ng th√°i (b·∫≠t/t·∫Øt) c·ªßa c√°c n√∫t."""
        # Fast backward button (<<)
        self.children[0].disabled = self.current_page == 0
        # Slow backward button (<)
        self.children[1].disabled = self.current_page == 0
        # Slow forward button (>)
        self.children[2].disabled = self.current_page >= self.total_pages - 1
        # Fast forward button (>>)
        self.children[3].disabled = self.current_page >= self.total_pages - 1

    async def send_initial_message(self):
        """G·ª≠i tin nh·∫Øn ƒë·∫ßu ti√™n."""
        embed, file = await self.create_page_embed(self.current_page) # Th√™m await
        await self.update_buttons()
        self.message = await self.ctx.send(embed=embed, file=file, view=self)
    
    @discord.ui.button(style=discord.ButtonStyle.secondary, emoji="‚è™")
    async def fast_backward(self, interaction: discord.Interaction, button: discord.ui.Button):
        """L√πi nhanh 5 trang ho·∫∑c v·ªÅ trang ƒë·∫ßu."""
        self.current_page = max(0, self.current_page - 5)
        embed, file = await self.create_page_embed(self.current_page) # Th√™m await
        await self.update_buttons()
        await interaction.response.edit_message(embed=embed, attachments=[file], view=self)

    @discord.ui.button(style=discord.ButtonStyle.secondary, emoji="‚óÄÔ∏è")
    async def slow_backward(self, interaction: discord.Interaction, button: discord.ui.Button):
        """L√πi ch·∫≠m 1 trang."""
        if self.current_page > 0:
            self.current_page -= 1
            embed, file = await self.create_page_embed(self.current_page) # Th√™m await
            await self.update_buttons()
            await interaction.response.edit_message(embed=embed, attachments=[file], view=self)
        else:
            await interaction.response.defer()

    @discord.ui.button(style=discord.ButtonStyle.secondary, emoji="‚ñ∂Ô∏è")
    async def slow_forward(self, interaction: discord.Interaction, button: discord.ui.Button):
        """Ti·∫øn ch·∫≠m 1 trang."""
        if self.current_page < self.total_pages - 1:
            self.current_page += 1
            embed, file = await self.create_page_embed(self.current_page) # Th√™m await
            await self.update_buttons()
            await interaction.response.edit_message(embed=embed, attachments=[file], view=self)
        else:
            await interaction.response.defer()

    @discord.ui.button(style=discord.ButtonStyle.secondary, emoji="‚è©")
    async def fast_forward(self, interaction: discord.Interaction, button: discord.ui.Button):
        """Ti·∫øn nhanh 5 trang ho·∫∑c ƒë·∫øn trang cu·ªëi."""
        self.current_page = min(self.total_pages - 1, self.current_page + 5)
        embed, file = await self.create_page_embed(self.current_page) # Th√™m await
        await self.update_buttons()
        await interaction.response.edit_message(embed=embed, attachments=[file], view=self)

class DeployView(discord.ui.View):
    def __init__(self, author: discord.User, guilds: list[discord.Guild], agents: list[dict]):
        super().__init__(timeout=600) # TƒÉng th·ªùi gian ch·ªù
        self.author = author
        
        # Chia d·ªØ li·ªáu th√†nh c√°c trang
        self.guild_pages = [guilds[i:i + 25] for i in range(0, len(guilds), 25)]
        self.agent_pages = [agents[i:i + 25] for i in range(0, len(agents), 25)]
        
        # Theo d√µi trang hi·ªán t·∫°i
        self.current_guild_page = 0
        self.current_agent_page = 0
        
        # *** THAY ƒê·ªîI 1: L∆∞u tr·ªØ nhi·ªÅu ID server thay v√¨ m·ªôt ƒë·ªëi t∆∞·ª£ng guild duy nh·∫•t ***
        self.selected_guild_ids = set()
        self.selected_user_ids = set()

        # G·ªçi h√†m ƒë·ªÉ x√¢y d·ª±ng giao di·ªán ban ƒë·∫ßu
        self.update_view()

    def update_view(self):
        """X√≥a c√°c th√†nh ph·∫ßn c≈© v√† d·ª±ng l·∫°i giao di·ªán d·ª±a tr√™n trang hi·ªán t·∫°i."""
        self.clear_items() # X√≥a t·∫•t c·∫£ c√°c n√∫t v√† menu c≈©

        # --- T·∫°o menu ch·ªçn Server ---
        guild_options = [
            discord.SelectOption(
                label=g.name, 
                value=str(g.id), 
                # *** THAY ƒê·ªîI 2: ƒê√°nh d·∫•u c√°c server ƒë√£ ƒë∆∞·ª£c ch·ªçn trong set ***
                default=(g.id in self.selected_guild_ids)
            ) 
            for g in self.guild_pages[self.current_guild_page]
        ]
        guild_placeholder = f"B∆∞·ªõc 1: Ch·ªçn Server (Trang {self.current_guild_page + 1}/{len(self.guild_pages)})"
        # *** THAY ƒê·ªîI 3: Cho ph√©p ch·ªçn nhi·ªÅu server (min_values=0, max_values=...) ***
        guild_select = discord.ui.Select(
            placeholder=guild_placeholder, 
            min_values=0, 
            max_values=len(guild_options), 
            options=guild_options, 
            row=0
        )
        
        # *** THAY ƒê·ªîI 4: C·∫≠p nh·∫≠t callback ƒë·ªÉ x·ª≠ l√Ω nhi·ªÅu l·ª±a ch·ªçn server ***
        async def guild_callback(interaction: discord.Interaction):
            if interaction.user.id != self.author.id: return
            
            # X√≥a c√°c l·ª±a ch·ªçn c≈© t·ª´ trang n√†y ƒë·ªÉ kh√¥ng b·ªã tr√πng l·∫∑p
            ids_on_this_page = {int(opt.value) for opt in guild_options}
            self.selected_guild_ids.difference_update(ids_on_this_page)
            
            # Th√™m c√°c l·ª±a ch·ªçn m·ªõi
            for gid in interaction.data["values"]:
                self.selected_guild_ids.add(int(gid))
                
            # C·∫≠p nh·∫≠t l·∫°i view ƒë·ªÉ hi·ªÉn th·ªã ƒë√∫ng c√°c l·ª±a ch·ªçn
            self.update_view()
            await interaction.message.edit(view=self)
            await interaction.response.send_message(f"‚úÖ C·∫≠p nh·∫≠t! ƒê√£ ch·ªçn **{len(self.selected_guild_ids)}** server.", ephemeral=True)

        guild_select.callback = guild_callback
        self.add_item(guild_select)

        # --- T·∫°o c√°c n√∫t ƒëi·ªÅu h∆∞·ªõng cho Server ---
        if len(self.guild_pages) > 1:
            prev_guild_button = discord.ui.Button(label="‚óÄÔ∏è Server Tr∆∞·ªõc", style=discord.ButtonStyle.secondary, row=1, disabled=(self.current_guild_page == 0))
            next_guild_button = discord.ui.Button(label="Server Ti·∫øp ‚ñ∂Ô∏è", style=discord.ButtonStyle.secondary, row=1, disabled=(self.current_guild_page >= len(self.guild_pages) - 1))

            async def prev_guild_callback(interaction: discord.Interaction):
                if interaction.user.id != self.author.id: return
                self.current_guild_page -= 1
                self.update_view()
                await interaction.response.edit_message(view=self)
            
            async def next_guild_callback(interaction: discord.Interaction):
                if interaction.user.id != self.author.id: return
                self.current_guild_page += 1
                self.update_view()
                await interaction.response.edit_message(view=self)
            
            prev_guild_button.callback = prev_guild_callback
            next_guild_button.callback = next_guild_callback
            self.add_item(prev_guild_button)
            self.add_item(next_guild_button)

        # --- T·∫°o menu ch·ªçn ƒêi·ªáp vi√™n ---
        agent_options = [
            discord.SelectOption(
                label=str(agent.get('username', agent.get('id'))), 
                value=str(agent.get('id')),
                default=(int(agent.get('id')) in self.selected_user_ids)
            ) for agent in self.agent_pages[self.current_agent_page]
        ]
        agent_placeholder = f"B∆∞·ªõc 2: Ch·ªçn ƒêi·ªáp vi√™n (Trang {self.current_agent_page + 1}/{len(self.agent_pages)})"
        agent_select = discord.ui.Select(placeholder=agent_placeholder, min_values=0, max_values=len(agent_options), options=agent_options, row=2)

        async def agent_callback(interaction: discord.Interaction):
            if interaction.user.id != self.author.id: return
            
            ids_on_this_page = {int(opt.value) for opt in agent_options}
            self.selected_user_ids.difference_update(ids_on_this_page)
            
            for uid in interaction.data["values"]:
                self.selected_user_ids.add(int(uid))
                
            self.update_view()
            await interaction.message.edit(view=self)
            await interaction.followup.send(f"‚úÖ C·∫≠p nh·∫≠t! ƒê√£ ch·ªçn **{len(self.selected_user_ids)}** ƒëi·ªáp vi√™n.", ephemeral=True)
            
        agent_select.callback = agent_callback
        self.add_item(agent_select)
        
        # --- T·∫°o c√°c n√∫t ƒëi·ªÅu h∆∞·ªõng cho ƒêi·ªáp vi√™n ---
        if len(self.agent_pages) > 1:
            prev_agent_button = discord.ui.Button(label="‚óÄÔ∏è ƒêi·ªáp vi√™n Tr∆∞·ªõc", style=discord.ButtonStyle.secondary, row=3, disabled=(self.current_agent_page == 0))
            next_agent_button = discord.ui.Button(label="ƒêi·ªáp vi√™n Ti·∫øp ‚ñ∂Ô∏è", style=discord.ButtonStyle.secondary, row=3, disabled=(self.current_agent_page >= len(self.agent_pages) - 1))

            async def prev_agent_callback(interaction: discord.Interaction):
                if interaction.user.id != self.author.id: return
                self.current_agent_page -= 1
                self.update_view()
                await interaction.response.edit_message(view=self)

            async def next_agent_callback(interaction: discord.Interaction):
                if interaction.user.id != self.author.id: return
                self.current_agent_page += 1
                self.update_view()
                await interaction.response.edit_message(view=self)

            prev_agent_button.callback = prev_agent_callback
            next_agent_button.callback = next_agent_callback
            self.add_item(prev_agent_button)
            self.add_item(next_agent_button)

        # --- N√∫t h√†nh ƒë·ªông cu·ªëi c√πng ---
        # *** THAY ƒê·ªîI 5: C·∫≠p nh·∫≠t label v√† ƒëi·ªÅu ki·ªán disabled c·ªßa n√∫t ***
        button_label = f"Tri·ªÉn Khai ({len(self.selected_user_ids)} agents -> {len(self.selected_guild_ids)} servers)"
        deploy_button = discord.ui.Button(
            label=button_label, 
            style=discord.ButtonStyle.danger, 
            emoji="üöÄ", 
            row=4, 
            disabled=(not self.selected_guild_ids or not self.selected_user_ids)
        )
        
        # *** THAY ƒê·ªîI 6: C·∫≠p nh·∫≠t logic x·ª≠ l√Ω tri·ªÉn khai cho nhi·ªÅu server ***
        async def deploy_callback(interaction: discord.Interaction):
            if interaction.user.id != self.author.id: return
            
            # V√¥ hi·ªáu h√≥a view
            for item in self.children: item.disabled = True
            await interaction.response.edit_message(view=self)
            
            await interaction.followup.send(
                f"üöÄ **B·∫Øt ƒë·∫ßu tri·ªÉn khai {len(self.selected_user_ids)} ƒëi·ªáp vi√™n t·ªõi {len(self.selected_guild_ids)} server...**"
            )
            
            success_count, fail_count, failed_adds = 0, 0, []
            
            for guild_id in self.selected_guild_ids:
                guild = bot.get_guild(guild_id)
                if not guild:
                    fail_count += len(self.selected_user_ids)
                    failed_adds.append(f"T·∫•t c·∫£ agents -> Server ID `{guild_id}` (Kh√¥ng t√¨m th·∫•y ho·∫∑c bot kh√¥ng ·ªü trong server)")
                    continue
                    
                for user_id in self.selected_user_ids:
                    access_token = get_user_access_token(user_id)
                    if not access_token:
                        fail_count += 1
                        failed_adds.append(f"<@{user_id}> -> `{guild.name}` (Kh√¥ng c√≥ token)")
                        continue
                    
                    try:
                        success, message = await add_member_to_guild(guild.id, user_id, access_token)
                        if success:
                            success_count += 1
                        else:
                            fail_count += 1
                            failed_adds.append(f"<@{user_id}> -> `{guild.name}` ({message[:50]})")
                    except Exception as e:
                        fail_count += 1
                        failed_adds.append(f"<@{user_id}> -> `{guild.name}` (L·ªói: {e})")
            
            embed = discord.Embed(title=f"B√°o C√°o Tri·ªÉn Khai H√†ng Lo·∫°t", color=0x00ff00)
            embed.add_field(name="‚úÖ L∆∞·ª£t Th√™m Th√†nh C√¥ng", value=f"{success_count}", inline=True)
            embed.add_field(name="‚ùå L∆∞·ª£t Th√™m Th·∫•t B·∫°i", value=f"{fail_count}", inline=True)
            
            if failed_adds:
                # Gi·ªõi h·∫°n chi ti·∫øt l·ªói ƒë·ªÉ kh√¥ng v∆∞·ª£t qu√° gi·ªõi h·∫°n c·ªßa Discord Embed
                error_details = "\n".join(failed_adds)
                if len(error_details) > 1024:
                    error_details = error_details[:1020] + "\n..."
                embed.add_field(name="Chi ti·∫øt th·∫•t b·∫°i", value=error_details, inline=False)
                
            await interaction.followup.send(embed=embed)

        deploy_button.callback = deploy_callback
        self.add_item(deploy_button)

# --- Modal 1: Nh·∫≠p s·ªë l∆∞·ª£ng k√™nh ---
# --- View ƒë·ªÉ ch·ªçn s·ªë l∆∞·ª£ng k√™nh ---
class QuantityView(discord.ui.View):
    def __init__(self, selected_guilds: list[discord.Guild], author: discord.User):
        super().__init__(timeout=300)
        self.selected_guilds = selected_guilds
        self.author = author

    @discord.ui.button(label="1 K√™nh", style=discord.ButtonStyle.secondary)
    async def one_channel(self, interaction: discord.Interaction, button: discord.ui.Button):
        if interaction.user.id != self.author.id:
            return await interaction.response.send_message("‚ùå Ch·ªâ ng∆∞·ªùi t·∫°o l·ªánh m·ªõi c√≥ th·ªÉ s·ª≠ d·ª•ng!", ephemeral=True)
        await interaction.response.send_modal(NamesModal(self.selected_guilds, 1))

    @discord.ui.button(label="2 K√™nh", style=discord.ButtonStyle.secondary)
    async def two_channels(self, interaction: discord.Interaction, button: discord.ui.Button):
        if interaction.user.id != self.author.id:
            return await interaction.response.send_message("‚ùå Ch·ªâ ng∆∞·ªùi t·∫°o l·ªánh m·ªõi c√≥ th·ªÉ s·ª≠ d·ª•ng!", ephemeral=True)
        await interaction.response.send_modal(NamesModal(self.selected_guilds, 2))

    @discord.ui.button(label="3 K√™nh", style=discord.ButtonStyle.secondary)
    async def three_channels(self, interaction: discord.Interaction, button: discord.ui.Button):
        if interaction.user.id != self.author.id:
            return await interaction.response.send_message("‚ùå Ch·ªâ ng∆∞·ªùi t·∫°o l·ªánh m·ªõi c√≥ th·ªÉ s·ª≠ d·ª•ng!", ephemeral=True)
        await interaction.response.send_modal(NamesModal(self.selected_guilds, 3))

    @discord.ui.button(label="4 K√™nh", style=discord.ButtonStyle.secondary)
    async def four_channels(self, interaction: discord.Interaction, button: discord.ui.Button):
        if interaction.user.id != self.author.id:
            return await interaction.response.send_message("‚ùå Ch·ªâ ng∆∞·ªùi t·∫°o l·ªánh m·ªõi c√≥ th·ªÉ s·ª≠ d·ª•ng!", ephemeral=True)
        await interaction.response.send_modal(NamesModal(self.selected_guilds, 4))

    @discord.ui.button(label="5 K√™nh", style=discord.ButtonStyle.secondary)
    async def five_channels(self, interaction: discord.Interaction, button: discord.ui.Button):
        if interaction.user.id != self.author.id:
            return await interaction.response.send_message("‚ùå Ch·ªâ ng∆∞·ªùi t·∫°o l·ªánh m·ªõi c√≥ th·ªÉ s·ª≠ d·ª•ng!", ephemeral=True)
        await interaction.response.send_modal(NamesModal(self.selected_guilds, 5))

# --- Modal ƒë·ªÉ nh·∫≠p t√™n ri√™ng cho t·ª´ng k√™nh ---
class NamesModal(discord.ui.Modal):
    def __init__(self, selected_guilds: list[discord.Guild], quantity: int):
        super().__init__(title=f"Nh·∫≠p T√™n Cho {quantity} K√™nh")
        self.selected_guilds = selected_guilds
        self.quantity = quantity
        
        # T·∫°o c√°c TextInput fields d·ª±a tr√™n s·ªë l∆∞·ª£ng
        if quantity >= 1:
            self.name1 = discord.ui.TextInput(
                label="T√™n K√™nh #1",
                placeholder="Nh·∫≠p t√™n cho k√™nh th·ª© 1...",
                required=True
            )
            self.add_item(self.name1)
        
        if quantity >= 2:
            self.name2 = discord.ui.TextInput(
                label="T√™n K√™nh #2", 
                placeholder="Nh·∫≠p t√™n cho k√™nh th·ª© 2...",
                required=True
            )
            self.add_item(self.name2)
            
        if quantity >= 3:
            self.name3 = discord.ui.TextInput(
                label="T√™n K√™nh #3",
                placeholder="Nh·∫≠p t√™n cho k√™nh th·ª© 3...", 
                required=True
            )
            self.add_item(self.name3)
            
        if quantity >= 4:
            self.name4 = discord.ui.TextInput(
                label="T√™n K√™nh #4",
                placeholder="Nh·∫≠p t√™n cho k√™nh th·ª© 4...",
                required=True
            )
            self.add_item(self.name4)
            
        if quantity >= 5:
            self.name5 = discord.ui.TextInput(
                label="T√™n K√™nh #5",
                placeholder="Nh·∫≠p t√™n cho k√™nh th·ª© 5...",
                required=True
            )
            self.add_item(self.name5)

    async def on_submit(self, interaction: discord.Interaction):
        # L·∫•y t√™n t·ª´ c√°c √¥ nh·∫≠p li·ªáu d·ª±a tr√™n s·ªë l∆∞·ª£ng
        channel_names = []
        
        if hasattr(self, 'name1'):
            channel_names.append(self.name1.value)
        if hasattr(self, 'name2'):
            channel_names.append(self.name2.value)
        if hasattr(self, 'name3'):
            channel_names.append(self.name3.value)
        if hasattr(self, 'name4'):
            channel_names.append(self.name4.value)
        if hasattr(self, 'name5'):
            channel_names.append(self.name5.value)
        
        await interaction.response.send_message(f"‚úÖ **ƒê√£ nh·∫≠n l·ªánh!** Chu·∫©n b·ªã t·∫°o **{len(channel_names)}** k√™nh trong **{len(self.selected_guilds)}** server...", ephemeral=True)

        total_success = 0
        total_fail = 0
        
        for guild in self.selected_guilds:
            for name in channel_names:
                try:
                    await guild.create_text_channel(name=name)
                    total_success += 1
                except discord.Forbidden:
                    total_fail += 1
                    print(f"L·ªói quy·ªÅn: Kh√¥ng th·ªÉ t·∫°o k√™nh '{name}' trong server {guild.name}")
                except Exception as e:
                    total_fail += 1
                    print(f"L·ªói kh√¥ng x√°c ƒë·ªãnh khi t·∫°o k√™nh '{name}': {e}")
        
        await interaction.followup.send(f"**B√°o c√°o ho√†n t·∫•t:**\n‚úÖ ƒê√£ t·∫°o th√†nh c√¥ng: **{total_success}** k√™nh.\n‚ùå Th·∫•t b·∫°i: **{total_fail}** k√™nh.")

# --- View ƒë·ªÉ ch·ªçn s·ªë l∆∞·ª£ng k√™nh ---
class QuantityView(discord.ui.View):
    def __init__(self, selected_guilds: list[discord.Guild], author: discord.User):
        super().__init__(timeout=300)
        self.selected_guilds = selected_guilds
        self.author = author

    @discord.ui.button(label="1 K√™nh", style=discord.ButtonStyle.secondary)
    async def one_channel(self, interaction: discord.Interaction, button: discord.ui.Button):
        if interaction.user.id != self.author.id:
            return await interaction.response.send_message("‚ùå Ch·ªâ ng∆∞·ªùi t·∫°o l·ªánh m·ªõi c√≥ th·ªÉ s·ª≠ d·ª•ng!", ephemeral=True)
        await interaction.response.send_modal(NamesModal(self.selected_guilds, 1))

    @discord.ui.button(label="2 K√™nh", style=discord.ButtonStyle.secondary)
    async def two_channels(self, interaction: discord.Interaction, button: discord.ui.Button):
        if interaction.user.id != self.author.id:
            return await interaction.response.send_message("‚ùå Ch·ªâ ng∆∞·ªùi t·∫°o l·ªánh m·ªõi c√≥ th·ªÉ s·ª≠ d·ª•ng!", ephemeral=True)
        await interaction.response.send_modal(NamesModal(self.selected_guilds, 2))

    @discord.ui.button(label="3 K√™nh", style=discord.ButtonStyle.secondary)
    async def three_channels(self, interaction: discord.Interaction, button: discord.ui.Button):
        if interaction.user.id != self.author.id:
            return await interaction.response.send_message("‚ùå Ch·ªâ ng∆∞·ªùi t·∫°o l·ªánh m·ªõi c√≥ th·ªÉ s·ª≠ d·ª•ng!", ephemeral=True)
        await interaction.response.send_modal(NamesModal(self.selected_guilds, 3))

    @discord.ui.button(label="4 K√™nh", style=discord.ButtonStyle.secondary)
    async def four_channels(self, interaction: discord.Interaction, button: discord.ui.Button):
        if interaction.user.id != self.author.id:
            return await interaction.response.send_message("‚ùå Ch·ªâ ng∆∞·ªùi t·∫°o l·ªánh m·ªõi c√≥ th·ªÉ s·ª≠ d·ª•ng!", ephemeral=True)
        await interaction.response.send_modal(NamesModal(self.selected_guilds, 4))

    @discord.ui.button(label="5 K√™nh", style=discord.ButtonStyle.secondary)
    async def five_channels(self, interaction: discord.Interaction, button: discord.ui.Button):
        if interaction.user.id != self.author.id:
            return await interaction.response.send_message("‚ùå Ch·ªâ ng∆∞·ªùi t·∫°o l·ªánh m·ªõi c√≥ th·ªÉ s·ª≠ d·ª•ng!", ephemeral=True)
        await interaction.response.send_modal(NamesModal(self.selected_guilds, 5))

# --- Modal ƒë·ªÉ nh·∫≠p t√™n ri√™ng cho t·ª´ng k√™nh ---
class NamesModal(discord.ui.Modal):
    def __init__(self, selected_guilds: list[discord.Guild], quantity: int):
        super().__init__(title=f"Nh·∫≠p T√™n Cho {quantity} K√™nh")
        self.selected_guilds = selected_guilds
        self.quantity = quantity
        
        # T·∫°o c√°c TextInput fields d·ª±a tr√™n s·ªë l∆∞·ª£ng
        if quantity >= 1:
            self.name1 = discord.ui.TextInput(
                label="T√™n K√™nh #1",
                placeholder="Nh·∫≠p t√™n cho k√™nh th·ª© 1...",
                required=True
            )
            self.add_item(self.name1)
        
        if quantity >= 2:
            self.name2 = discord.ui.TextInput(
                label="T√™n K√™nh #2", 
                placeholder="Nh·∫≠p t√™n cho k√™nh th·ª© 2...",
                required=True
            )
            self.add_item(self.name2)
            
        if quantity >= 3:
            self.name3 = discord.ui.TextInput(
                label="T√™n K√™nh #3",
                placeholder="Nh·∫≠p t√™n cho k√™nh th·ª© 3...", 
                required=True
            )
            self.add_item(self.name3)
            
        if quantity >= 4:
            self.name4 = discord.ui.TextInput(
                label="T√™n K√™nh #4",
                placeholder="Nh·∫≠p t√™n cho k√™nh th·ª© 4...",
                required=True
            )
            self.add_item(self.name4)
            
        if quantity >= 5:
            self.name5 = discord.ui.TextInput(
                label="T√™n K√™nh #5",
                placeholder="Nh·∫≠p t√™n cho k√™nh th·ª© 5...",
                required=True
            )
            self.add_item(self.name5)

    async def on_submit(self, interaction: discord.Interaction):
        # L·∫•y t√™n t·ª´ c√°c √¥ nh·∫≠p li·ªáu d·ª±a tr√™n s·ªë l∆∞·ª£ng
        channel_names = []
        
        if hasattr(self, 'name1'):
            channel_names.append(self.name1.value)
        if hasattr(self, 'name2'):
            channel_names.append(self.name2.value)
        if hasattr(self, 'name3'):
            channel_names.append(self.name3.value)
        if hasattr(self, 'name4'):
            channel_names.append(self.name4.value)
        if hasattr(self, 'name5'):
            channel_names.append(self.name5.value)
        
        await interaction.response.send_message(f"‚úÖ **ƒê√£ nh·∫≠n l·ªánh!** Chu·∫©n b·ªã t·∫°o **{len(channel_names)}** k√™nh trong **{len(self.selected_guilds)}** server...", ephemeral=True)

        total_success = 0
        total_fail = 0
        
        for guild in self.selected_guilds:
            for name in channel_names:
                try:
                    await guild.create_text_channel(name=name)
                    total_success += 1
                except discord.Forbidden:
                    total_fail += 1
                    print(f"L·ªói quy·ªÅn: Kh√¥ng th·ªÉ t·∫°o k√™nh '{name}' trong server {guild.name}")
                except Exception as e:
                    total_fail += 1
                    print(f"L·ªói kh√¥ng x√°c ƒë·ªãnh khi t·∫°o k√™nh '{name}': {e}")
        
        await interaction.followup.send(f"**B√°o c√°o ho√†n t·∫•t:**\n‚úÖ ƒê√£ t·∫°o th√†nh c√¥ng: **{total_success}** k√™nh.\n‚ùå Th·∫•t b·∫°i: **{total_fail}** k√™nh.")

# --- View ƒë·ªÉ ch·ªçn server v√† b·∫Øt ƒë·∫ßu quy tr√¨nh (PHI√äN B·∫¢N N√ÇNG C·∫§P) ---
class CreateChannelView(discord.ui.View):
    def __init__(self, author: discord.User, guilds: list[discord.Guild]):
        super().__init__(timeout=600)
        self.author = author
        self.all_guilds = guilds
        
        # Chia danh s√°ch server th√†nh c√°c trang, m·ªói trang 25 server
        self.guild_pages = [self.all_guilds[i:i + 25] for i in range(0, len(self.all_guilds), 25)]
        
        # Theo d√µi tr·∫°ng th√°i
        self.current_guild_page = 0
        self.selected_guild_ids = set()

        # D·ª±ng giao di·ªán ban ƒë·∫ßu
        self.update_view()

    def update_view(self):
        """X√≥a v√† d·ª±ng l·∫°i to√†n b·ªô giao di·ªán d·ª±a tr√™n tr·∫°ng th√°i hi·ªán t·∫°i."""
        self.clear_items()

        # --- Menu Ch·ªçn Server ---
        current_options = [
            discord.SelectOption(
                label=g.name, 
                value=str(g.id),
                # ƒê√°nh d·∫•u nh·ªØng server ƒë√£ ƒë∆∞·ª£c ch·ªçn tr∆∞·ªõc ƒë√≥
                default=(g.id in self.selected_guild_ids)
            ) 
            for g in self.guild_pages[self.current_guild_page]
        ]
        
        placeholder = f"B∆∞·ªõc 1: Ch·ªçn Server (Trang {self.current_guild_page + 1}/{len(self.guild_pages)})"
        
        # min_values=0 cho ph√©p b·ªè ch·ªçn t·∫•t c·∫£ trong menu hi·ªán t·∫°i
        guild_select = discord.ui.Select(
            placeholder=placeholder, 
            min_values=0, 
            max_values=len(current_options), 
            options=current_options, 
            row=0
        )
        
        async def guild_callback(interaction: discord.Interaction):
            if interaction.user.id != self.author.id:
                return await interaction.response.send_message("‚ùå B·∫°n kh√¥ng c√≥ quy·ªÅn t∆∞∆°ng t√°c!", ephemeral=True)
            
            # X√≥a c√°c l·ª±a ch·ªçn c≈© t·ª´ trang n√†y ƒë·ªÉ x·ª≠ l√Ω vi·ªác b·ªè ch·ªçn
            ids_on_this_page = {int(opt.value) for opt in current_options}
            self.selected_guild_ids.difference_update(ids_on_this_page)
            
            # Th√™m c√°c l·ª±a ch·ªçn m·ªõi t·ª´ t∆∞∆°ng t√°c
            for gid in interaction.data["values"]:
                self.selected_guild_ids.add(int(gid))
                
            # C·∫≠p nh·∫≠t l·∫°i giao di·ªán ƒë·ªÉ hi·ªÉn th·ªã ƒë√∫ng c√°c l·ª±a ch·ªçn v√† tr·∫°ng th√°i n√∫t
            self.update_view()
            await interaction.response.edit_message(view=self)
            await interaction.followup.send(f"‚úÖ C·∫≠p nh·∫≠t! ƒê√£ ch·ªçn **{len(self.selected_guild_ids)}** server.", ephemeral=True)

        guild_select.callback = guild_callback
        self.add_item(guild_select)

        # --- N√∫t ƒêi·ªÅu H∆∞·ªõng Server ---
        if len(self.guild_pages) > 1:
            prev_button = discord.ui.Button(label="‚óÄÔ∏è Trang Tr∆∞·ªõc", style=discord.ButtonStyle.secondary, row=1, disabled=(self.current_guild_page == 0))
            next_button = discord.ui.Button(label="Trang Ti·∫øp ‚ñ∂Ô∏è", style=discord.ButtonStyle.secondary, row=1, disabled=(self.current_guild_page >= len(self.guild_pages) - 1))

            async def prev_callback(interaction: discord.Interaction):
                if interaction.user.id != self.author.id: return
                self.current_guild_page -= 1
                self.update_view()
                await interaction.response.edit_message(view=self)
            
            async def next_callback(interaction: discord.Interaction):
                if interaction.user.id != self.author.id: return
                self.current_guild_page += 1
                self.update_view()
                await interaction.response.edit_message(view=self)
            
            prev_button.callback = prev_callback
            next_button.callback = next_callback
            self.add_item(prev_button)
            self.add_item(next_button)
            
        # --- N√∫t H√†nh ƒê·ªông Cu·ªëi C√πng ---
        # Label c·ªßa n√∫t s·∫Ω thay ƒë·ªïi ƒë·ªÉ hi·ªÉn th·ªã s·ªë l∆∞·ª£ng server ƒë√£ ch·ªçn
        button_label = f"B∆∞·ªõc 2: Ch·ªçn S·ªë L∆∞·ª£ng K√™nh ({len(self.selected_guild_ids)} server)"
        proceed_button = discord.ui.Button(
            label=button_label,
            style=discord.ButtonStyle.success,
            row=4,
            # N√∫t b·ªã v√¥ hi·ªáu h√≥a n·∫øu ch∆∞a ch·ªçn server n√†o
            disabled=(not self.selected_guild_ids)
        )
        
        async def proceed_callback(interaction: discord.Interaction):
            if interaction.user.id != self.author.id:
                return await interaction.response.send_message("‚ùå Ch·ªâ ng∆∞·ªùi t·∫°o l·ªánh m·ªõi c√≥ th·ªÉ s·ª≠ d·ª•ng!", ephemeral=True)
            
            # V√¥ hi·ªáu h√≥a giao di·ªán c≈© tr∆∞·ªõc khi g·ª≠i c√°i m·ªõi
            for item in self.children:
                item.disabled = True
            await interaction.message.edit(view=self)

            # L·∫•y c√°c ƒë·ªëi t∆∞·ª£ng guild t·ª´ c√°c ID ƒë√£ ch·ªçn
            selected_guilds = [g for g in self.all_guilds if g.id in self.selected_guild_ids]

            embed = discord.Embed(
                title="üî¢ Ch·ªçn S·ªë L∆∞·ª£ng K√™nh",
                description=f"B·∫°n ƒë√£ ch·ªçn **{len(selected_guilds)}** server.\nH√£y ch·ªçn s·ªë l∆∞·ª£ng k√™nh mu·ªën t·∫°o trong m·ªói server:",
                color=0x00ff00
            )
            
            # G·ª≠i tin nh·∫Øn m·ªõi (ephemeral) v·ªõi c√°c n√∫t ch·ªçn s·ªë l∆∞·ª£ng
            view = QuantityView(selected_guilds, self.author)
            await interaction.response.send_message(embed=embed, view=view, ephemeral=True)

        proceed_button.callback = proceed_callback
        self.add_item(proceed_button)


@bot.command(name='create', help='(Ch·ªß bot) T·∫°o nhi·ªÅu k√™nh trong nhi·ªÅu server.')
@commands.is_owner()
async def create(ctx):
    """M·ªü giao di·ªán t·∫°o k√™nh h√†ng lo·∫°t."""
    # S·∫Øp x·∫øp server gi·ªëng nh∆∞ l·ªánh deploy ƒë·ªÉ c√≥ th·ª© t·ª± nh·∫•t qu√°n
    sorted_guilds = sorted(bot.guilds, key=lambda g: g.me.joined_at)
    
    view = CreateChannelView(ctx.author, sorted_guilds)
    
    embed = discord.Embed(
        title="üõ†Ô∏è B·∫£ng ƒêi·ªÅu Khi·ªÉn T·∫°o K√™nh",
        description="S·ª≠ d·ª•ng c√°c c√¥ng c·ª• b√™n d∆∞·ªõi ƒë·ªÉ t·∫°o k√™nh h√†ng lo·∫°t.",
        color=discord.Color.blue()
    )
    await ctx.send(embed=embed, view=view)

# --- Getid ---
class ChannelNameModal(discord.ui.Modal, title="Nh·∫≠p T√™n K√™nh C·∫ßn T√¨m"):
    def __init__(self, selected_guilds: list[discord.Guild]):
        super().__init__()
        self.selected_guilds = selected_guilds

    channel_name = discord.ui.TextInput(
        label="T√™n k√™nh b·∫°n mu·ªën t√¨m ID",
        placeholder="Nh·∫≠p ch√≠nh x√°c t√™n k√™nh, kh√¥ng bao g·ªìm d·∫•u #",
        required=True
    )

    async def on_submit(self, interaction: discord.Interaction):
        await interaction.response.send_message(f"üîé ƒêang t√¨m ki·∫øm c√°c k√™nh c√≥ t√™n `{self.channel_name.value}`...", ephemeral=True)
        
        results = {}
        target_name = self.channel_name.value.lower().strip()

        for guild in self.selected_guilds:
            found_channels = []
            for channel in guild.text_channels:
                if channel.name.lower() == target_name:
                    found_channels.append(channel.id)
            
            if found_channels:
                results[guild.name] = found_channels

        # T·∫°o Embed k·∫øt qu·∫£
        if not results:
            embed = discord.Embed(
                title="Kh√¥ng T√¨m Th·∫•y K·∫øt Qu·∫£",
                description=f"Kh√¥ng t√¨m th·∫•y k√™nh n√†o c√≥ t√™n `{self.channel_name.value}` trong c√°c server ƒë√£ ch·ªçn.",
                color=discord.Color.red()
            )
        else:
            embed = discord.Embed(
                title=f"K·∫øt Qu·∫£ T√¨m Ki·∫øm cho K√™nh '{self.channel_name.value}'",
                color=discord.Color.green()
            )
            for guild_name, channel_ids in results.items():
                id_string = "\n".join([f"`{channel_id}`" for channel_id in channel_ids])
                embed.add_field(name=f"üñ•Ô∏è Server: {guild_name}", value=id_string, inline=False)
        
        await interaction.followup.send(embed=embed)
        
# --- View ƒë·ªÉ l·∫•y ID k√™nh (ƒê√£ s·ª≠a l·ªói ph√¢n trang) ---
class GetChannelIdView(discord.ui.View):
    def __init__(self, author: discord.User, guilds: list[discord.Guild]):
        super().__init__(timeout=300)
        self.author = author
        self.guilds = guilds
        self.selected_guild_ids = set()
        
        # Chia danh s√°ch server th√†nh c√°c ph·∫ßn nh·ªè, m·ªói ph·∫ßn t·ªëi ƒëa 25
        guild_chunks = [self.guilds[i:i + 25] for i in range(0, len(self.guilds), 25)]

        # T·∫°o m·ªôt menu cho m·ªói ph·∫ßn
        for index, chunk in enumerate(guild_chunks):
            self.add_item(self.create_guild_select(chunk, index, len(guild_chunks)))

    def create_guild_select(self, guild_chunk: list[discord.Guild], page_index: int, total_pages: int):
        options = [discord.SelectOption(label=g.name, value=str(g.id)) for g in guild_chunk]
        placeholder = f"B∆∞·ªõc 1: Ch·ªçn Server (Trang {page_index + 1}/{total_pages})"
        select = discord.ui.Select(placeholder=placeholder, options=options, min_values=1, max_values=len(options))
        
        async def callback(interaction: discord.Interaction):
            if interaction.user.id != self.author.id: return

            # C·∫≠p nh·∫≠t t·∫≠p h·ª£p c√°c ID ƒë√£ ch·ªçn
            ids_in_this_menu = {int(opt.value) for opt in select.options}
            self.selected_guild_ids.difference_update(ids_in_this_menu)
            for gid in interaction.data["values"]:
                self.selected_guild_ids.add(int(gid))

            await interaction.response.send_message(f"‚úÖ ƒê√£ c·∫≠p nh·∫≠t l·ª±a ch·ªçn server.", ephemeral=True)
        
        select.callback = callback
        return select

    @discord.ui.button(label="B∆∞·ªõc 2: Nh·∫≠p T√™n K√™nh & L·∫•y ID", style=discord.ButtonStyle.primary, emoji="üîé")
    async def open_name_modal(self, interaction: discord.Interaction, button: discord.ui.Button):
        if interaction.user.id != self.author.id: return
        if not self.selected_guild_ids:
            return await interaction.response.send_message("L·ªói: Vui l√≤ng ch·ªçn √≠t nh·∫•t m·ªôt Server t·ª´ menu.", ephemeral=True)
        
        # L·∫•y c√°c ƒë·ªëi t∆∞·ª£ng guild t·ª´ c√°c ID ƒë√£ ch·ªçn
        selected_guilds = [g for g in self.guilds if g.id in self.selected_guild_ids]
        
        # M·ªü Modal ƒë·ªÉ ng∆∞·ªùi d√πng nh·∫≠p t√™n k√™nh (D√≤ng n√†y gi·ªù s·∫Ω ho·∫°t ƒë·ªông)
        modal = ChannelNameModal(selected_guilds)
        await interaction.response.send_modal(modal)

# --- DISCORD BOT EVENTS ---
@bot.event
async def on_ready():
    print(f'‚úÖ Bot ƒëƒÉng nh·∫≠p th√†nh c√¥ng: {bot.user.name}')
    print(f'üîó Web server: {RENDER_URL}')
    print(f'üîë Redirect URI: {REDIRECT_URI}')
    
    # Check storage status
    db_status = "Connected" if get_db_connection() else "Unavailable"
    jsonbin_status = "Connected" if JSONBIN_API_KEY else "Not configured"
    print(f'üíæ Database: {db_status}')
    print(f'üåê JSONBin.io: {jsonbin_status}')
    
    
    try:
        synced = await bot.tree.sync()
        print(f"‚úÖ ƒê√£ ƒë·ªìng b·ªô {len(synced)} l·ªánh slash.")
    except Exception as e:
        print(f"‚ùå Kh√¥ng th·ªÉ ƒë·ªìng b·ªô l·ªánh slash: {e}")
    print('------')

@bot.event
async def on_message(message):
    if message.author == bot.user:
        return
    
    # X·ª≠ l√Ω c√°c l·ªánh !command
    await bot.process_commands(message)

@bot.event
async def on_message_edit(before, after):
    """X·ª≠ l√Ω khi tin nh·∫Øn ƒë∆∞·ª£c CH·ªàNH S·ª¨A."""
    if after.author == bot.user:
        return
    
# --- DISCORD BOT COMMANDS ---
@bot.command(name='ping', help='Ki·ªÉm tra ƒë·ªô tr·ªÖ k·∫øt n·ªëi c·ªßa bot.')
async def ping(ctx):
    latency = round(bot.latency * 1000)
    await ctx.send(f'üèì Pong! ƒê·ªô tr·ªÖ l√† {latency}ms.')

@bot.command(name='auth', help='L·∫•y link ·ªßy quy·ªÅn ƒë·ªÉ bot c√≥ th·ªÉ th√™m b·∫°n v√†o server.')
async def auth(ctx):
    auth_url = (
        f'https://discord.com/api/oauth2/authorize?client_id={CLIENT_ID}'
        f'&redirect_uri={REDIRECT_URI}&response_type=code&scope=identify%20guilds.join'
    )
    embed = discord.Embed(
        title="üîê ·ª¶y quy·ªÅn cho Bot",
        description=f"Nh·∫•p v√†o link b√™n d∆∞·ªõi ƒë·ªÉ cho ph√©p bot th√™m b·∫°n v√†o c√°c server:",
        color=0x00ff00
    )
    embed.add_field(name="üîó Link ·ªßy quy·ªÅn", value=f"[Nh·∫•p v√†o ƒë√¢y]({auth_url})", inline=False)
    embed.add_field(name="üìå L∆∞u √Ω", value="Token s·∫Ω ƒë∆∞·ª£c l∆∞u an to√†n v√†o cloud storage", inline=False)
    await ctx.send(embed=embed)

@bot.command(name='add_me', help='Th√™m b·∫°n v√†o t·∫•t c·∫£ c√°c server c·ªßa bot.')
async def add_me(ctx):
    user_id = ctx.author.id
    await ctx.send(f"‚úÖ B·∫Øt ƒë·∫ßu qu√° tr√¨nh th√™m {ctx.author.mention} v√†o c√°c server...")
    
    access_token = get_user_access_token(user_id)
    if not access_token:
        embed = discord.Embed(
            title="‚ùå Ch∆∞a ·ªßy quy·ªÅn",
            description="B·∫°n ch∆∞a ·ªßy quy·ªÅn cho bot. H√£y s·ª≠ d·ª•ng l·ªánh `!auth` tr∆∞·ªõc.",
            color=0xff0000
        )
        await ctx.send(embed=embed)
        return
    
    success_count = 0
    fail_count = 0
    
    for guild in bot.guilds:
        try:
            member = guild.get_member(user_id)
            if member:
                print(f"üëç {ctx.author.name} ƒë√£ c√≥ trong server {guild.name}")
                success_count += 1
                continue
            
            success, message = await add_member_to_guild(guild.id, user_id, access_token)
            
            if success:
                print(f"üëç Th√™m th√†nh c√¥ng {ctx.author.name} v√†o server {guild.name}: {message}")
                success_count += 1
            else:
                print(f"üëé L·ªói khi th√™m v√†o {guild.name}: {message}")
                fail_count += 1
                
        except Exception as e:
            print(f"üëé L·ªói kh√¥ng x√°c ƒë·ªãnh khi th√™m v√†o {guild.name}: {e}")
            fail_count += 1
    
    embed = discord.Embed(title="üìä K·∫øt qu·∫£", color=0x00ff00)
    embed.add_field(name="‚úÖ Th√†nh c√¥ng", value=f"{success_count} server", inline=True)
    embed.add_field(name="‚ùå Th·∫•t b·∫°i", value=f"{fail_count} server", inline=True)
    await ctx.send(embed=embed)

@bot.command(name='check_token', help='Ki·ªÉm tra xem b·∫°n ƒë√£ ·ªßy quy·ªÅn ch∆∞a.')
async def check_token(ctx):
    user_id = ctx.author.id
    token = get_user_access_token(user_id)
    
    if token:
        embed = discord.Embed(
            title="‚úÖ ƒê√£ ·ªßy quy·ªÅn", 
            description="Bot ƒë√£ c√≥ token c·ªßa b·∫°n v√† c√≥ th·ªÉ th√™m b·∫°n v√†o server",
            color=0x00ff00
        )
        embed.add_field(name="üíæ L∆∞u tr·ªØ", value="Token ƒë∆∞·ª£c l∆∞u an to√†n tr√™n cloud", inline=False)
    else:
        embed = discord.Embed(
            title="‚ùå Ch∆∞a ·ªßy quy·ªÅn", 
            description="B·∫°n ch∆∞a ·ªßy quy·ªÅn cho bot. H√£y s·ª≠ d·ª•ng `!auth`",
            color=0xff0000
        )
    
    await ctx.send(embed=embed)

@bot.command(name='status', help='Ki·ªÉm tra tr·∫°ng th√°i bot v√† storage.')
async def status(ctx):
    # Test database connection
    db_connection = get_db_connection()
    db_status = "‚úÖ Connected" if db_connection else "‚ùå Unavailable"
    if db_connection:
        db_connection.close()
    
    # Test JSONBin connection
    jsonbin_status = "‚úÖ Configured" if JSONBIN_API_KEY else "‚ùå Not configured"
    
    embed = discord.Embed(title="ü§ñ Tr·∫°ng th√°i Bot", color=0x0099ff)
    embed.add_field(name="üìä Server", value=f"{len(bot.guilds)} server", inline=True)
    embed.add_field(name="üë• Ng∆∞·ªùi d√πng", value=f"{len(bot.users)} user", inline=True)
    embed.add_field(name="üíæ Database", value=db_status, inline=True)
    embed.add_field(name="üåê JSONBin.io", value=jsonbin_status, inline=True)
    embed.add_field(name="üåç Web Server", value=f"[Truy c·∫≠p]({RENDER_URL})", inline=False)
    await ctx.send(embed=embed)
    
@bot.command(name='force_add', help='(Ch·ªß bot) Th√™m m·ªôt ng∆∞·ªùi d√πng b·∫•t k·ª≥ v√†o t·∫•t c·∫£ c√°c server.')
@commands.is_owner()
async def force_add(ctx, user_to_add: discord.User):
    """
    L·ªánh ch·ªâ d√†nh cho ch·ªß bot ƒë·ªÉ th√™m m·ªôt ng∆∞·ªùi d√πng b·∫•t k·ª≥ v√†o c√°c server.
    C√°ch d√πng: !force_add <User_ID> ho·∫∑c !force_add @T√™nNg∆∞·ªùiD√πng
    """
    user_id = user_to_add.id
    await ctx.send(f"‚úÖ ƒê√£ nh·∫≠n l·ªánh! B·∫Øt ƒë·∫ßu qu√° tr√¨nh th√™m {user_to_add.mention} v√†o c√°c server...")
    
    access_token = get_user_access_token(user_id)
    if not access_token:
        embed = discord.Embed(
            title="‚ùå Ng∆∞·ªùi d√πng ch∆∞a ·ªßy quy·ªÅn",
            description=f"Ng∆∞·ªùi d√πng {user_to_add.mention} ch∆∞a ·ªßy quy·ªÅn cho bot. H√£y y√™u c·∫ßu h·ªç s·ª≠ d·ª•ng l·ªánh `!auth` tr∆∞·ªõc.",
            color=0xff0000
        )
        await ctx.send(embed=embed)
        return
    
    success_count = 0
    fail_count = 0
    
    for guild in bot.guilds:
        try:
            member = guild.get_member(user_id)
            if member:
                print(f"üëç {user_to_add.name} ƒë√£ c√≥ trong server {guild.name}")
                success_count += 1
                continue
            
            success, message = await add_member_to_guild(guild.id, user_id, access_token)
            
            if success:
                print(f"üëç Th√™m th√†nh c√¥ng {user_to_add.name} v√†o server {guild.name}: {message}")
                success_count += 1
            else:
                print(f"üëé L·ªói khi th√™m v√†o {guild.name}: {message}")
                fail_count += 1
                
        except Exception as e:
            print(f"üëé L·ªói kh√¥ng x√°c ƒë·ªãnh khi th√™m v√†o {guild.name}: {e}")
            fail_count += 1
    
    embed = discord.Embed(title=f"üìä K·∫øt qu·∫£ th√™m {user_to_add.name}", color=0x00ff00)
    embed.add_field(name="‚úÖ Th√†nh c√¥ng", value=f"{success_count} server", inline=True)
    embed.add_field(name="‚ùå Th·∫•t b·∫°i", value=f"{fail_count} server", inline=True)
    await ctx.send(embed=embed)

@force_add.error
async def force_add_error(ctx, error):
    if isinstance(error, commands.NotOwner):
        await ctx.send("üö´ L·ªói: B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng l·ªánh n√†y!")
    elif isinstance(error, commands.UserNotFound):
        await ctx.send(f"‚ùå L·ªói: Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng ƒë∆∞·ª£c ch·ªâ ƒë·ªãnh.")
    else:
        print(f"L·ªói khi th·ª±c thi l·ªánh force_add: {error}")
        await ctx.send(f"ƒê√£ c√≥ l·ªói x·∫£y ra khi th·ª±c thi l·ªánh. Vui l√≤ng ki·ªÉm tra console.")
        
@bot.command(name='invite', help='(Ch·ªß bot) M·ªü giao di·ªán ƒë·ªÉ ch·ªçn server m·ªùi ng∆∞·ªùi d√πng v√†o.')
@commands.is_owner()
async def invite(ctx, user_to_add: discord.User):
    """
    M·ªü m·ªôt giao di·ªán t∆∞∆°ng t√°c ƒë·ªÉ ch·ªçn server m·ªùi ng∆∞·ªùi d√πng.
    """
    if not user_to_add:
        await ctx.send("Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng n√†y.")
        return
        
    # T·∫°o giao di·ªán (View) v√† truy·ªÅn c√°c th√¥ng tin c·∫ßn thi·∫øt
    view = ServerSelectView(author=ctx.author, target_user=user_to_add, guilds=bot.guilds)
    
    embed = discord.Embed(
        title=f"üíå M·ªùi {user_to_add.name}",
        description="H√£y ch·ªçn c√°c server b·∫°n mu·ªën m·ªùi ng∆∞·ªùi n√†y v√†o t·ª´ menu b√™n d∆∞·ªõi, sau ƒë√≥ nh·∫•n n√∫t 'Summon'.",
        color=0x0099ff
    )
    embed.set_thumbnail(url=user_to_add.display_avatar.url)
    
    await ctx.send(embed=embed, view=view)

# --- SLASH COMMANDS ---
@bot.tree.command(name="help", description="Hi·ªÉn th·ªã th√¥ng tin v·ªÅ c√°c l·ªánh c·ªßa bot")
async def help_slash(interaction: discord.Interaction):
    embed = discord.Embed(
        title="üìù B·∫£ng L·ªánh C·ªßa Bot M·∫≠t V·ª•",
        description="D∆∞·ªõi ƒë√¢y l√† danh s√°ch c√°c m·∫≠t l·ªánh c√≥ s·∫µn.",
        color=0x0099ff
    )
    embed.set_thumbnail(url=bot.user.display_avatar.url)
    
    # L·ªánh cho m·ªçi ng∆∞·ªùi
    embed.add_field(name="üïµÔ∏è L·ªánh C∆° B·∫£n (D√†nh cho m·ªçi ƒêi·ªáp vi√™n)", value="----------------------------------", inline=False)
    embed.add_field(name="`!auth`", value="L·∫•y link ·ªßy quy·ªÅn ƒë·ªÉ gia nh·∫≠p m·∫°ng l∆∞·ªõi.", inline=True)
    embed.add_field(name="`!add_me`", value="T·ª± tri·ªÉn khai b·∫£n th√¢n ƒë·∫øn t·∫•t c·∫£ server.", inline=True)
    embed.add_field(name="`!check_token`", value="Ki·ªÉm tra tr·∫°ng th√°i ·ªßy quy·ªÅn c·ªßa b·∫°n.", inline=True)
    embed.add_field(name="`!status`", value="Xem tr·∫°ng th√°i ho·∫°t ƒë·ªông c·ªßa bot v√† h·ªá th·ªëng.", inline=True)
    embed.add_field(name="`!ping`", value="Ki·ªÉm tra ƒë·ªô tr·ªÖ c·ªßa bot.", inline=True)
    
    # L·ªánh ch·ªâ d√†nh cho ch·ªß bot
    if await bot.is_owner(interaction.user):
        embed.add_field(name="üëë L·ªánh Ch·ªâ Huy (Ch·ªâ d√†nh cho Owner)", value="----------------------------------", inline=False)
        embed.add_field(name="`!roster`", value="Xem danh s√°ch ƒëi·ªáp vi√™n.", inline=True)
        embed.add_field(name="`!deploy`", value="Th√™m NHI·ªÄU ƒëi·ªáp vi√™n v√†o M·ªòT server.", inline=True)
        embed.add_field(name="`!invite <User>`", value="Th√™m M·ªòT ƒëi·ªáp vi√™n v√†o NHI·ªÄU server.", inline=True)
        embed.add_field(name="`!remove <User>`", value="X√≥a d·ªØ li·ªáu c·ªßa m·ªôt ƒëi·ªáp vi√™n.", inline=True)
        embed.add_field(name="`!force_add <User>`", value="√âp th√™m ƒëi·ªáp vi√™n v√†o T·∫§T C·∫¢ server.", inline=True)
        embed.add_field(name="`!storage_info`", value="Xem th√¥ng tin c√°c h·ªá th·ªëng l∆∞u tr·ªØ.", inline=True)

    embed.set_footer(text="H√£y ch·ªçn m·ªôt m·∫≠t l·ªánh ƒë·ªÉ b·∫Øt ƒë·∫ßu chi·∫øn d·ªãch.")
    await interaction.response.send_message(embed=embed, ephemeral=True)
    
@bot.command(name='help', help='Hi·ªÉn th·ªã b·∫£ng tr·ª£ gi√∫p v·ªÅ c√°c l·ªánh.')
async def help(ctx):
    embed = discord.Embed(
        title="üìù B·∫£ng L·ªánh C·ªßa Bot M·∫≠t V·ª•",
        description="D∆∞·ªõi ƒë√¢y l√† danh s√°ch c√°c m·∫≠t l·ªánh c√≥ s·∫µn.",
        color=0x0099ff
    )
    embed.set_thumbnail(url=bot.user.display_avatar.url)
    
    # L·ªánh cho m·ªçi ng∆∞·ªùi
    embed.add_field(name="üïµÔ∏è L·ªánh C∆° B·∫£n (D√†nh cho m·ªçi ƒêi·ªáp vi√™n)", value="----------------------------------", inline=False)
    embed.add_field(name="`!auth`", value="L·∫•y link ·ªßy quy·ªÅn ƒë·ªÉ gia nh·∫≠p m·∫°ng l∆∞·ªõi.", inline=True)
    embed.add_field(name="`!add_me`", value="T·ª± tri·ªÉn khai b·∫£n th√¢n ƒë·∫øn t·∫•t c·∫£ server.", inline=True)
    embed.add_field(name="`!check_token`", value="Ki·ªÉm tra tr·∫°ng th√°i ·ªßy quy·ªÅn c·ªßa b·∫°n.", inline=True)
    embed.add_field(name="`!status`", value="Xem tr·∫°ng th√°i ho·∫°t ƒë·ªông c·ªßa bot v√† h·ªá th·ªëng.", inline=True)
    embed.add_field(name="`!ping`", value="Ki·ªÉm tra ƒë·ªô tr·ªÖ c·ªßa bot.", inline=True)

    # L·ªánh ch·ªâ d√†nh cho ch·ªß bot
    if await bot.is_owner(ctx.author):
        embed.add_field(name="üëë L·ªánh Ch·ªâ Huy (Ch·ªâ d√†nh cho Owner)", value="----------------------------------", inline=False)
        embed.add_field(name="`!roster`", value="Xem danh s√°ch ƒëi·ªáp vi√™n.", inline=True)
        embed.add_field(name="`!deploy`", value="Th√™m NHI·ªÄU ƒëi·ªáp vi√™n v√†o M·ªòT server.", inline=True)
        embed.add_field(name="`!invite <User>`", value="Th√™m M·ªòT ƒëi·ªáp vi√™n v√†o NHI·ªÄU server.", inline=True)
        embed.add_field(name="`!remove <User>`", value="X√≥a d·ªØ li·ªáu c·ªßa m·ªôt ƒëi·ªáp vi√™n.", inline=True)
        embed.add_field(name="`!force_add <User>`", value="√âp th√™m ƒëi·ªáp vi√™n v√†o T·∫§T C·∫¢ server.", inline=True)
        embed.add_field(name="`!storage_info`", value="Xem th√¥ng tin c√°c h·ªá th·ªëng l∆∞u tr·ªØ.", inline=True)

    embed.set_footer(text="H√£y ch·ªçn m·ªôt m·∫≠t l·ªánh ƒë·ªÉ b·∫Øt ƒë·∫ßu chi·∫øn d·ªãch.")
    await ctx.send(embed=embed)

# --- ADDITIONAL JSONBIN MANAGEMENT COMMANDS ---
@bot.command(name='storage_info', help='(Ch·ªß bot) Hi·ªÉn th·ªã th√¥ng tin v·ªÅ storage systems.')
@commands.is_owner()
async def storage_info(ctx):
    """Hi·ªÉn th·ªã th√¥ng tin chi ti·∫øt v·ªÅ c√°c storage systems"""
    
    # Test Database
    db_connection = get_db_connection()
    if db_connection:
        try:
            cursor = db_connection.cursor()
            cursor.execute("SELECT COUNT(*) FROM user_tokens")
            db_count = cursor.fetchone()[0]
            cursor.close()
            db_connection.close()
            db_info = f"‚úÖ Connected ({db_count} tokens)"
        except:
            db_info = "‚ùå Connection Error"
    else:
        db_info = "‚ùå Not Available"
    
    # Test JSONBin
    if JSONBIN_API_KEY and JSONBIN_BIN_ID:
        try:
            data = jsonbin_storage.read_data()
            jsonbin_count = len(data) if isinstance(data, dict) else 0
            jsonbin_info = f"‚úÖ Connected ({jsonbin_count} tokens)"
        except:
            jsonbin_info = "‚ùå Connection Error"
    else:
        jsonbin_info = "‚ùå Not Configured"
    
    embed = discord.Embed(title="üíæ Storage Systems Info", color=0x0099ff)
    embed.add_field(name="üóÉÔ∏è PostgreSQL Database", value=db_info, inline=False)
    embed.add_field(name="üåê JSONBin.io", value=jsonbin_info, inline=False)
    
    if JSONBIN_BIN_ID:
        embed.add_field(name="üìã JSONBin Bin ID", value=f"`{JSONBIN_BIN_ID}`", inline=False)
    
    embed.add_field(name="‚ÑπÔ∏è Hierarchy", value="Database ‚Üí JSONBin.io ‚Üí Local JSON", inline=False)
    
    await ctx.send(embed=embed)

@bot.command(name='migrate_tokens', help='(Ch·ªß bot) Migrate tokens between storage systems.')
@commands.is_owner()
async def migrate_tokens(ctx, source: str = None, target: str = None):
    """
    Migrate tokens between storage systems
    Usage: !migrate_tokens <source> <target>
    Sources/Targets: db, jsonbin, json
    """
    
    if not source or not target:
        embed = discord.Embed(
            title="üì¶ Token Migration",
            description="Migrate tokens between storage systems",
            color=0x00ff00
        )
        embed.add_field(
            name="Usage", 
            value="`!migrate_tokens <source> <target>`\n\nValid options:\n‚Ä¢ `db` - PostgreSQL Database\n‚Ä¢ `jsonbin` - JSONBin.io\n‚Ä¢ `json` - Local JSON file", 
            inline=False
        )
        embed.add_field(
            name="Examples", 
            value="`!migrate_tokens json jsonbin`\n`!migrate_tokens db jsonbin`", 
            inline=False
        )
        await ctx.send(embed=embed)
        return
    
    await ctx.send(f"üîÑ Starting migration from {source} to {target}...")
    
    # Get source data
    source_data = {}
    if source == "db":
        conn = get_db_connection()
        if conn:
            try:
                cursor = conn.cursor()
                cursor.execute("SELECT user_id, access_token, username FROM user_tokens")
                rows = cursor.fetchall()
                for row in rows:
                    source_data[row[0]] = {
                        'access_token': row[1],
                        'username': row[2],
                        'updated_at': str(time.time())
                    }
                cursor.close()
                conn.close()
            except Exception as e:
                await ctx.send(f"‚ùå Database read error: {e}")
                return
    elif source == "jsonbin":
        try:
            source_data = jsonbin_storage.read_data()
        except Exception as e:
            await ctx.send(f"‚ùå JSONBin read error: {e}")
            return
    elif source == "json":
        try:
            with open('tokens.json', 'r') as f:
                source_data = json.load(f)
        except Exception as e:
            await ctx.send(f"‚ùå JSON file read error: {e}")
            return
    
    if not source_data:
        await ctx.send(f"‚ùå No data found in {source}")
        return
    
    # Write to target
    success_count = 0
    fail_count = 0
    
    for user_id, token_data in source_data.items():
        if isinstance(token_data, dict):
            access_token = token_data.get('access_token')
            username = token_data.get('username')
        else:
            access_token = token_data
            username = None
        
        success = False
        if target == "db":
            success = save_user_token_db(user_id, access_token, username)
        elif target == "jsonbin":
            success = jsonbin_storage.save_user_token(user_id, access_token, username)
        elif target == "json":
            success = save_user_token_json(user_id, access_token, username)
        
        if success:
            success_count += 1
        else:
            fail_count += 1
    
    embed = discord.Embed(title="üì¶ Migration Complete", color=0x00ff00)
    embed.add_field(name="‚úÖ Migrated", value=f"{success_count} tokens", inline=True)
    embed.add_field(name="‚ùå Failed", value=f"{fail_count} tokens", inline=True)
    embed.add_field(name="üìä Total", value=f"{len(source_data)} tokens found", inline=True)
    
    await ctx.send(embed=embed)

@bot.command(name='roster', help='(Owner only) Displays a paginated visual roster of all agents.')
@commands.is_owner()
async def roster(ctx):
    """Hi·ªÉn th·ªã danh s√°ch ƒëi·ªáp vi√™n ƒë√£ ƒë∆∞·ª£c ·ªßy quy·ªÅn m·ªôt c√°ch tr·ª±c quan v√† c√≥ ph√¢n trang."""
    await ctx.send("ƒêang truy c·∫≠p kho l∆∞u tr·ªØ m·∫°ng...")

    try:
        full_data = jsonbin_storage.read_data()
        if not full_data:
            await ctx.send("‚ùå **L·ªói:** Kh√¥ng t√¨m th·∫•y h·ªì s∆° ƒëi·ªáp vi√™n n√†o trong m·∫°ng.")
            return

        # T√°ch danh s√°ch th·ª© t·ª± v√† d·ªØ li·ªáu ƒëi·ªáp vi√™n
        roster_order = full_data.pop('_roster_order', None)
        agent_data = full_data
        
        # --- Logic s·∫Øp x·∫øp m·ªõi ---
        agents = []
        
        # T·∫°o m·ªôt set ch·ª©a ID c·ªßa c√°c ƒëi·ªáp vi√™n c√≥ d·ªØ li·ªáu ƒë·ªÉ ki·ªÉm tra nhanh
        valid_agent_ids = {uid for uid, data in agent_data.items() if isinstance(data, dict)}

        if roster_order:
            # 1. Th√™m c√°c ƒëi·ªáp vi√™n theo th·ª© t·ª± ƒë√£ l∆∞u
            ordered_ids = set()
            for uid in roster_order:
                if uid in valid_agent_ids:
                    data = agent_data[uid]
                    agents.append({
                        'id': uid, 
                        'username': data.get('username', 'N/A'), 
                        'avatar_hash': data.get('avatar_hash')
                    })
                    ordered_ids.add(uid)
            
            # 2. Th√™m c√°c ƒëi·ªáp vi√™n m·ªõi (ch∆∞a c√≥ trong danh s√°ch th·ª© t·ª±) v√†o cu·ªëi
            for uid in valid_agent_ids:
                if uid not in ordered_ids:
                    data = agent_data[uid]
                    agents.append({
                        'id': uid, 
                        'username': data.get('username', 'N/A'), 
                        'avatar_hash': data.get('avatar_hash')
                    })
        else:
            # N·∫øu kh√¥ng c√≥ th·ª© t·ª±, t·∫°o danh s√°ch theo m·∫∑c ƒë·ªãnh
            print("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y `_roster_order`. T·∫°o danh s√°ch m·∫∑c ƒë·ªãnh.")
            for uid, data in agent_data.items():
                if isinstance(data, dict):
                    agents.append({
                        'id': uid, 
                        'username': data.get('username', 'N/A'), 
                        'avatar_hash': data.get('avatar_hash')
                    })

        if not agents:
            await ctx.send("‚ùå **L·ªói:** Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu ƒëi·ªáp vi√™n h·ª£p l·ªá.")
            return
        
        # Kh·ªüi t·∫°o v√† g·ª≠i trang ƒë·∫ßu ti√™n
        pagination_view = RosterPages(agents, ctx)
        await pagination_view.send_initial_message()

    except Exception as e:
        await ctx.send(f"ƒê√£ x·∫£y ra l·ªói kh√¥ng mong mu·ªën: {e}")
        print(f"L·ªói l·ªánh roster: {e}")

@bot.command(name='roster_move', help='(Ch·ªß bot) Thay ƒë·ªïi v·ªã tr√≠ c·ªßa m·ªôt ƒëi·ªáp vi√™n trong danh s√°ch roster.')
@commands.is_owner()
async def roster_move(ctx, user_to_move: discord.User, position: int):
    """
    Di chuy·ªÉn m·ªôt ng∆∞·ªùi d√πng ƒë·∫øn m·ªôt v·ªã tr√≠ c·ª• th·ªÉ trong danh s√°ch roster.
    V·ªã tr√≠ b·∫Øt ƒë·∫ßu t·ª´ 1.
    C√°ch d√πng: !roster_move @T√™nNg∆∞·ªùiD√πng 1
    """
    if position < 1:
        return await ctx.send("‚ùå V·ªã tr√≠ ph·∫£i l√† m·ªôt s·ªë l·ªõn h∆°n ho·∫∑c b·∫±ng 1.")

    await ctx.send(f"‚è≥ ƒêang th·ª±c hi·ªán thay ƒë·ªïi v·ªã tr√≠ cho **{user_to_move.name}**...")

    # 1. ƒê·ªçc to√†n b·ªô d·ªØ li·ªáu t·ª´ JSONBin
    full_data = jsonbin_storage.read_data()
    if not full_data:
        return await ctx.send("‚ùå Kh√¥ng c√≥ d·ªØ li·ªáu n√†o trong storage ƒë·ªÉ s·∫Øp x·∫øp.")

    # 2. L·∫•y danh s√°ch th·ª© t·ª± ho·∫∑c t·∫°o m·ªõi n·∫øu ch∆∞a c√≥
    roster_order = full_data.get('_roster_order', list(key for key in full_data.keys() if key != '_roster_order'))
    
    user_id_to_move = str(user_to_move.id)

    # 3. Ki·ªÉm tra xem user c√≥ trong danh s√°ch kh√¥ng
    if user_id_to_move not in roster_order:
        # N·∫øu ch∆∞a c√≥, th√™m v√†o cu·ªëi r·ªìi m·ªõi di chuy·ªÉn
        roster_order.append(user_id_to_move)

    # 4. Th·ª±c hi·ªán di chuy·ªÉn
    try:
        # X√≥a ID kh·ªèi v·ªã tr√≠ hi·ªán t·∫°i
        roster_order.remove(user_id_to_move)
        
        # Ch√®n v√†o v·ªã tr√≠ m·ªõi (chuy·ªÉn ƒë·ªïi v·ªã tr√≠ 1-based th√†nh index 0-based)
        new_index = position - 1
        roster_order.insert(new_index, user_id_to_move)
        
    except ValueError:
        # L·ªói n√†y kh√¥ng n√™n x·∫£y ra do ƒë√£ ki·ªÉm tra ·ªü tr√™n, nh∆∞ng v·∫´n ƒë·ªÉ ph√≤ng h·ªù
        return await ctx.send(f"‚ùå Kh√¥ng t√¨m th·∫•y ƒëi·ªáp vi√™n **{user_to_move.name}** trong danh s√°ch th·ª© t·ª±.")
    
    # 5. C·∫≠p nh·∫≠t l·∫°i d·ªØ li·ªáu v√† ghi v√†o JSONBin
    full_data['_roster_order'] = roster_order
    
    if jsonbin_storage.write_data(full_data):
        embed = discord.Embed(
            title="‚úÖ S·∫Øp X·∫øp Th√†nh C√¥ng",
            description=f"ƒê√£ di chuy·ªÉn ƒëi·ªáp vi√™n **{user_to_move.name}** ƒë·∫øn v·ªã tr√≠ **#{position}** trong roster.",
            color=discord.Color.green()
        )
        await ctx.send(embed=embed)
    else:
        await ctx.send("‚ùå ƒê√£ x·∫£y ra l·ªói khi c·ªë g·∫Øng l∆∞u l·∫°i th·ª© t·ª± m·ªõi v√†o JSONBin.")

@roster_move.error
async def roster_move_error(ctx, error):
    if isinstance(error, commands.MissingRequiredArgument):
        await ctx.send("‚ùå **Sai c√∫ ph√°p!** Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß.\n**V√≠ d·ª•:** `!roster_move @T√™nUser 1`")
    elif isinstance(error, commands.UserNotFound):
        await ctx.send("‚ùå Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng ƒë∆∞·ª£c ch·ªâ ƒë·ªãnh.")
    elif isinstance(error, commands.BadArgument):
        await ctx.send("‚ùå V·ªã tr√≠ ph·∫£i l√† m·ªôt con s·ªë.")
    else:
        await ctx.send(f"ƒê√£ x·∫£y ra l·ªói kh√¥ng x√°c ƒë·ªãnh: {error}")
        print(f"L·ªói l·ªánh roster_move: {error}")

@bot.command(name='remove', help='(Owner only) Removes an agent from all storage systems.')
@commands.is_owner()
async def remove(ctx, user_to_remove: discord.User):
    """Removes a user's data from the database, JSONBin, and local JSON."""
    if not user_to_remove:
        await ctx.send("‚ùå User not found.")
        return

    user_id_str = str(user_to_remove.id)
    await ctx.send(f"üî• Initiating data purge for agent **{user_to_remove.name}** (`{user_id_str}`)...")

    # X√≥a t·ª´ c√°c ngu·ªìn
    db_success = delete_user_from_db(user_id_str)
    jsonbin_success = jsonbin_storage.delete_user(user_id_str)
    json_success = delete_user_from_json(user_id_str)

    # T·∫°o b√°o c√°o k·∫øt qu·∫£
    embed = discord.Embed(
        title=f"Data Purge Report for {user_to_remove.name}",
        color=discord.Color.red()
    )
    embed.add_field(name="Database (PostgreSQL)", value="‚úÖ Success" if db_success else "‚ùå Failed", inline=False)
    embed.add_field(name="Cloud Archive (JSONBin.io)", value="‚úÖ Success" if jsonbin_success else "‚ùå Failed", inline=False)
    embed.add_field(name="Local Backup (JSON file)", value="‚úÖ Success" if json_success else "‚ùå Failed", inline=False)
    
    await ctx.send(embed=embed)

@bot.command(name='deploy', help='(Ch·ªß bot) Th√™m nhi·ªÅu ƒëi·ªáp vi√™n v√†o m·ªôt server.')
@commands.is_owner()
async def deploy(ctx):
    """M·ªü giao di·ªán ƒë·ªÉ th√™m nhi·ªÅu user v√†o m·ªôt server ƒë∆∞·ª£c ch·ªçn."""
    agent_data = jsonbin_storage.read_data()
    agents = [
        {'id': uid, 'username': data.get('username', 'N/A')}
        for uid, data in agent_data.items() if isinstance(data, dict)
    ]

    if not agents:
        return await ctx.send("Kh√¥ng c√≥ ƒëi·ªáp vi√™n n√†o trong m·∫°ng l∆∞·ªõi ƒë·ªÉ tri·ªÉn khai.")

    guilds = sorted(bot.guilds, key=lambda g: g.me.joined_at)
    
    view = DeployView(ctx.author, guilds, agents)
    
    embed = discord.Embed(
        title="üìù Giao Di·ªán Tri·ªÉn Khai Nh√≥m",
        description="S·ª≠ d·ª•ng menu b√™n d∆∞·ªõi ƒë·ªÉ ch·ªçn ƒë√≠ch ƒë·∫øn v√† c√°c ƒëi·ªáp vi√™n c·∫ßn tri·ªÉn khai.",
        color=discord.Color.orange()
    )
    embed.set_footer(text=f"Hi·ªán c√≥ {len(agents)} ƒëi·ªáp vi√™n s·∫µn s√†ng.")
    
    await ctx.send(embed=embed, view=view)

@bot.command(name='getid', help='(Ch·ªß bot) L·∫•y ID c·ªßa c√°c k√™nh theo t√™n.')
@commands.is_owner()
async def getid(ctx):
    """M·ªü giao di·ªán ƒë·ªÉ t√¨m ID k√™nh."""
    # S·∫Øp x·∫øp danh s√°ch server theo ng√†y bot tham gia (t·ª´ c≈© nh·∫•t -> m·ªõi nh·∫•t)
    sorted_guilds = sorted(bot.guilds, key=lambda g: g.me.joined_at)
    
    # Truy·ªÅn danh s√°ch ƒë√£ s·∫Øp x·∫øp v√†o View
    view = GetChannelIdView(ctx.author, sorted_guilds)
    
    embed = discord.Embed(
        title="üîé C√¥ng C·ª• T√¨m ID K√™nh",
        description="S·ª≠ d·ª•ng menu b√™n d∆∞·ªõi ƒë·ªÉ ch·ªçn server v√† nh·∫≠p t√™n k√™nh c·∫ßn t√¨m.",
        color=discord.Color.purple()
    )
    await ctx.send(embed=embed, view=view)

@bot.command(name='setupadmin', help='(Ch·ªß bot) T·∫°o v√† c·∫•p vai tr√≤ qu·∫£n tr·ªã cho m·ªôt th√†nh vi√™n tr√™n t·∫•t c·∫£ c√°c server.')
@commands.is_owner()
async def setupadmin(ctx, member_to_grant: discord.Member):
    """
    T·∫°o m·ªôt vai tr√≤ c√≥ quy·ªÅn qu·∫£n tr·ªã vi√™n v√† g√°n n√≥ cho m·ªôt th√†nh vi√™n
    tr√™n t·∫•t c·∫£ c√°c server m√† bot c√≥ m·∫∑t.
    L·ªánh n√†y ch·ªâ d√†nh cho ch·ªß bot.
    C√°ch d√πng: !setupadmin @T√™nTh√†nhVi√™n
    """
    role_name = "Server Controller"
    permissions = discord.Permissions(administrator=True)
    
    # Tin nh·∫Øn c·∫£nh b√°o v√† x√°c nh·∫≠n
    warning_embed = discord.Embed(
        title="‚ö†Ô∏è C·∫£nh B√°o B·∫£o M·∫≠t",
        description=f"B·∫°n s·∫Øp t·∫°o vai tr√≤ **{role_name}** v·ªõi quy·ªÅn **QU·∫¢N TR·ªä VI√äN** v√† c·∫•p n√≥ cho **{member_to_grant.mention}** tr√™n **{len(bot.guilds)}** server.\n\n"
                    "H√†nh ƒë·ªông n√†y r·∫•t nguy hi·ªÉm v√† kh√¥ng th·ªÉ ho√†n t√°c. Ng∆∞·ªùi n√†y s·∫Ω c√≥ to√†n quy·ªÅn ki·ªÉm so√°t tr√™n t·∫•t c·∫£ c√°c server. B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën ti·∫øp t·ª•c kh√¥ng?",
        color=discord.Color.orange()
    )
    
    class ConfirmationView(discord.ui.View):
        def __init__(self):
            super().__init__(timeout=30)
            self.value = None

        @discord.ui.button(label="X√°c Nh·∫≠n", style=discord.ButtonStyle.danger)
        async def confirm(self, interaction: discord.Interaction, button: discord.ui.Button):
            if interaction.user.id != ctx.author.id:
                return await interaction.response.send_message("B·∫°n kh√¥ng c√≥ quy·ªÅn th·ª±c hi·ªán h√†nh ƒë·ªông n√†y.", ephemeral=True)
            self.value = True
            self.stop()
            # V√¥ hi·ªáu h√≥a c√°c n√∫t sau khi nh·∫•p
            for item in self.children:
                item.disabled = True
            await interaction.response.edit_message(view=self)

        @discord.ui.button(label="H·ªßy", style=discord.ButtonStyle.secondary)
        async def cancel(self, interaction: discord.Interaction, button: discord.ui.Button):
            if interaction.user.id != ctx.author.id:
                return await interaction.response.send_message("B·∫°n kh√¥ng c√≥ quy·ªÅn th·ª±c hi·ªán h√†nh ƒë·ªông n√†y.", ephemeral=True)
            self.value = False
            self.stop()
            # V√¥ hi·ªáu h√≥a c√°c n√∫t sau khi nh·∫•p
            for item in self.children:
                item.disabled = True
            await interaction.response.edit_message(view=self)

    view = ConfirmationView()
    confirm_message = await ctx.send(embed=warning_embed, view=view)
    
    await view.wait() # Ch·ªù ng∆∞·ªùi d√πng nh·∫•n n√∫t

    if view.value is None:
        return await confirm_message.edit(content="H·∫øt th·ªùi gian ch·ªù, ƒë√£ h·ªßy h√†nh ƒë·ªông.", embed=None, view=None)
    if not view.value:
        return await confirm_message.edit(content="ƒê√£ h·ªßy h√†nh ƒë·ªông.", embed=None, view=None)

    # N·∫øu ng∆∞·ªùi d√πng x√°c nh·∫≠n, ti·∫øp t·ª•c th·ª±c thi
    await confirm_message.edit(content=f"‚úÖ **ƒê√£ x√°c nh·∫≠n!** B·∫Øt ƒë·∫ßu qu√° tr√¨nh tr√™n **{len(bot.guilds)}** server...", embed=None, view=None)
    
    success_count = 0
    fail_count = 0
    failure_details = []

    for guild in bot.guilds:
        try:
            # 1. Ki·ªÉm tra xem th√†nh vi√™n c√≥ trong server kh√¥ng
            member_in_guild = guild.get_member(member_to_grant.id)
            if not member_in_guild:
                fail_count += 1
                failure_details.append(f"`{guild.name}`: Ng∆∞·ªùi d√πng kh√¥ng c√≥ trong server.")
                continue

            # 2. T√¨m ho·∫∑c t·∫°o vai tr√≤
            role = discord.utils.get(guild.roles, name=role_name)
            if role is None:
                # N·∫øu vai tr√≤ ch∆∞a t·ªìn t·∫°i, t·∫°o m·ªõi
                role = await guild.create_role(name=role_name, permissions=permissions, reason=f"T·∫°o b·ªüi {ctx.author.name} cho {member_to_grant.name}")
            
            # 3. C·∫•p vai tr√≤ cho th√†nh vi√™n
            if role not in member_in_guild.roles:
                await member_in_guild.add_roles(role, reason=f"C·∫•p b·ªüi {ctx.author.name}")
            
            success_count += 1

        except discord.Forbidden:
            fail_count += 1
            failure_details.append(f"`{guild.name}`: Bot kh√¥ng c√≥ quy·ªÅn `Manage Roles`.")
        except Exception as e:
            fail_count += 1
            failure_details.append(f"`{guild.name}`: L·ªói kh√¥ng x√°c ƒë·ªãnh - {e}")

    # T·∫°o b√°o c√°o k·∫øt qu·∫£
    result_embed = discord.Embed(
        title="B√°o C√°o Ho√†n T·∫•t",
        description=f"ƒê√£ x·ª≠ l√Ω xong vi·ªác t·∫°o v√† c·∫•p vai tr√≤ **{role_name}** cho **{member_to_grant.mention}**.",
        color=discord.Color.green() if fail_count == 0 else discord.Color.gold()
    )
    result_embed.add_field(name="‚úÖ Th√†nh c√¥ng", value=f"{success_count} server", inline=True)
    result_embed.add_field(name="‚ùå Th·∫•t b·∫°i", value=f"{fail_count} server", inline=True)

    if failure_details:
        # Gi·ªõi h·∫°n chi ti·∫øt l·ªói ƒë·ªÉ kh√¥ng v∆∞·ª£t qu√° gi·ªõi h·∫°n c·ªßa Discord
        error_info = "\n".join(failure_details)
        if len(error_info) > 1024:
            error_info = error_info[:1020] + "\n..."
        result_embed.add_field(name="Chi ti·∫øt th·∫•t b·∫°i", value=error_info, inline=False)

    await ctx.send(embed=result_embed)

@setupadmin.error
async def setupadmin_error(ctx, error):
    if isinstance(error, commands.NotOwner):
        await ctx.send("üö´ L·ªánh n√†y ch·ªâ d√†nh cho ch·ªß s·ªü h·ªØu bot!")
    elif isinstance(error, commands.MissingRequiredArgument):
        await ctx.send("‚ùå **Sai c√∫ ph√°p!** Vui l√≤ng tag ho·∫∑c nh·∫≠p ID c·ªßa th√†nh vi√™n.\n**V√≠ d·ª•:** `!setupadmin @T√™nUser`")
    elif isinstance(error, commands.MemberNotFound):
        await ctx.send("‚ùå Kh√¥ng t√¨m th·∫•y th√†nh vi√™n ƒë∆∞·ª£c ch·ªâ ƒë·ªãnh.")
    else:
        await ctx.send(f"ƒê√£ x·∫£y ra l·ªói kh√¥ng x√°c ƒë·ªãnh: {error}")
        print(f"L·ªói l·ªánh setupadmin: {error}")
        
# --- FLASK WEB ROUTES ---
@app.route('/')
def index():
    auth_url = (
        f'https://discord.com/api/oauth2/authorize?client_id={CLIENT_ID}'
        f'&redirect_uri={REDIRECT_URI}&response_type=code&scope=identify%20guilds.join'
    )
    
    # Storage status for display
    db_status = "üü¢ Connected" if get_db_connection() else "üî¥ Unavailable"
    jsonbin_status = "üü¢ Configured" if JSONBIN_API_KEY else "üî¥ Not configured"
    
    return f'''
    <!DOCTYPE html>
    <html>
    <head>
        <title>Discord Detective Bureau - Authorization Portal</title>
        <style>
            @import url('https://fonts.googleapis.com/css2?family=Creepster&family=UnifrakturMaguntia&family=Griffy:wght@400&family=Nosifer&display=swap');
            
            :root {{
                --dark-fog: #1a1a1a;
                --deep-shadow: #0d0d0d;
                --blood-red: #8B0000;
                --old-gold: #DAA520;
                --mysterious-green: #2F4F2F;
                --london-fog: rgba(105, 105, 105, 0.3);
                --Victorian-brown: #654321;
            }}
            
            * {{
                margin: 0;
                padding: 0;
                box-sizing: border-box;
            }}
            
            body {{
                font-family: 'EB Garamond', serif;
                background: linear-gradient(135deg, var(--deep-shadow) 0%, var(--dark-fog) 30%, #2c2c2c 70%, var(--deep-shadow) 100%);
                color: #e0e0e0;
                min-height: 100vh;
                position: relative;
                overflow-x: hidden;
            }}
            
            /* Victorian wallpaper pattern */
            body::before {{
                content: '';
                position: fixed;
                top: 0;
                left: 0;
                width: 100%;
                height: 100%;
                background-image: 
                    radial-gradient(circle at 25% 25%, var(--london-fog) 2px, transparent 2px),
                    radial-gradient(circle at 75% 75%, var(--london-fog) 1px, transparent 1px);
                background-size: 50px 50px;
                opacity: 0.1;
                z-index: -1;
            }}
            
            /* Fog effect */
            body::after {{
                content: '';
                position: fixed;
                bottom: -50px;
                left: -50px;
                width: 120%;
                height: 300px;
                background: linear-gradient(180deg, transparent 0%, var(--london-fog) 50%, rgba(105, 105, 105, 0.5) 100%);
                z-index: -1;
                animation: fogDrift 20s ease-in-out infinite;
            }}
            
            @keyframes fogDrift {{
                0%, 100% {{ transform: translateX(-20px); opacity: 0.3; }}
                50% {{ transform: translateX(20px); opacity: 0.6; }}
            }}
            
            .detective-header {{
                text-align: center;
                padding: 30px 20px;
                position: relative;
            }}
            
            .main-title {{
                font-family: 'UnifrakturMaguntia', cursive;
                font-size: 3.5em;
                color: var(--old-gold);
                text-shadow: 
                    3px 3px 0px var(--blood-red),
                    6px 6px 10px rgba(0, 0, 0, 0.8),
                    0px 0px 30px rgba(218, 165, 32, 0.3);
                margin-bottom: 10px;
                animation: mysterySway 4s ease-in-out infinite;
            }}
            
            @keyframes mysterySway {{
                0%, 100% {{ transform: rotate(-1deg) scale(1); }}
                50% {{ transform: rotate(1deg) scale(1.02); }}
            }}
            
            .subtitle {{
                font-family: 'Creepster', cursive;
                font-size: 1.5em;
                color: var(--blood-red);
                text-shadow: 2px 2px 5px rgba(0, 0, 0, 0.8);
                letter-spacing: 3px;
                animation: ghostlyGlow 3s ease-in-out infinite alternate;
            }}
            
            @keyframes ghostlyGlow {{
                from {{ text-shadow: 2px 2px 5px rgba(0, 0, 0, 0.8), 0 0 10px var(--blood-red); }}
                to {{ text-shadow: 2px 2px 5px rgba(0, 0, 0, 0.8), 0 0 20px var(--blood-red), 0 0 30px var(--blood-red); }}
            }}
            
            .container {{
                max-width: 900px;
                margin: 0 auto;
                padding: 0 20px;
            }}
            
            .evidence-box {{
                background: linear-gradient(145deg, rgba(20, 20, 20, 0.9), rgba(40, 40, 40, 0.9));
                border: 2px solid var(--old-gold);
                border-radius: 15px;
                padding: 30px;
                margin: 20px 0;
                box-shadow: 
                    inset 0 0 30px rgba(0, 0, 0, 0.5),
                    0 8px 25px rgba(0, 0, 0, 0.7),
                    0 0 50px rgba(218, 165, 32, 0.1);
                position: relative;
                backdrop-filter: blur(5px);
            }}
            
            .evidence-box::before {{
                content: '';
                position: absolute;
                top: -2px;
                left: -2px;
                right: -2px;
                bottom: -2px;
                background: linear-gradient(45deg, var(--old-gold), var(--blood-red), var(--old-gold));
                border-radius: 15px;
                z-index: -1;
                opacity: 0.3;
            }}
            
            .case-file-header {{
                font-family: 'Nosifer', cursive;
                font-size: 2em;
                color: var(--old-gold);
                text-align: center;
                margin-bottom: 20px;
                text-shadow: 
                    2px 2px 0px var(--blood-red),
                    4px 4px 8px rgba(0, 0, 0, 0.8);
                animation: ominousFlicker 2s ease-in-out infinite;
            }}
            
            @keyframes ominousFlicker {{
                0%, 94%, 100% {{ opacity: 1; }}
                95%, 97% {{ opacity: 0.8; }}
            }}
            
            .warning-stamp {{
                position: absolute;
                top: 10px;
                right: 20px;
                background: var(--blood-red);
                color: white;
                padding: 5px 15px;
                border-radius: 0;
                transform: rotate(12deg);
                font-family: 'EB Garamond', serif;
                font-weight: bold;
                font-size: 0.9em;
                box-shadow: 3px 3px 10px rgba(0, 0, 0, 0.6);
                border: 2px dashed white;
            }}
            
            .authorize-btn {{
                display: inline-block;
                background: linear-gradient(145deg, var(--blood-red), #a00000, var(--blood-red));
                color: #ffffff;
                padding: 20px 40px;
                text-decoration: none;
                border-radius: 10px;
                font-family: 'EB Garamond', serif;
                font-size: 1.3em;
                font-weight: bold;
                letter-spacing: 2px;
                text-align: center;
                margin: 20px auto;
                display: block;
                width: fit-content;
                transition: all 0.4s ease;
                box-shadow: 
                    0 8px 25px rgba(139, 0, 0, 0.4),
                    inset 0 0 20px rgba(255, 255, 255, 0.1);
                text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.8);
                position: relative;
                overflow: hidden;
            }}
            
            .authorize-btn::before {{
                content: '';
                position: absolute;
                top: 0;
                left: -100%;
                width: 100%;
                height: 100%;
                background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);
                transition: left 0.5s;
            }}
            
            .authorize-btn:hover::before {{
                left: 100%;
            }}
            
            .authorize-btn:hover {{
                background: linear-gradient(145deg, #a00000, var(--blood-red), #a00000);
                transform: translateY(-3px) scale(1.05);
                box-shadow: 
                    0 15px 35px rgba(139, 0, 0, 0.6),
                    inset 0 0 30px rgba(255, 255, 255, 0.2),
                    0 0 50px rgba(139, 0, 0, 0.3);
            }}
            
            .status-grid {{
                display: grid;
                grid-template-columns: 1fr 1fr;
                gap: 20px;
                margin: 25px 0;
            }}
            
            .status-item {{
                background: linear-gradient(135deg, rgba(47, 79, 79, 0.3), rgba(20, 20, 20, 0.8));
                padding: 20px;
                border-radius: 10px;
                border: 1px solid var(--mysterious-green);
                text-align: center;
                position: relative;
                overflow: hidden;
            }}
            
            .status-item::before {{
                content: '';
                position: absolute;
                top: 0;
                left: -100%;
                width: 100%;
                height: 2px;
                background: var(--old-gold);
                animation: scanLine 3s linear infinite;
            }}
            
            @keyframes scanLine {{
                0% {{ left: -100%; }}
                50% {{ left: 100%; }}
                100% {{ left: 100%; }}
            }}
            
            .status-label {{
                font-family: 'Creepster', cursive;
                color: var(--old-gold);
                font-size: 1.1em;
                margin-bottom: 8px;
                text-shadow: 1px 1px 3px rgba(0, 0, 0, 0.8);
            }}
            
            .commands-section {{
                background: linear-gradient(135deg, rgba(0, 0, 0, 0.8), rgba(20, 20, 20, 0.9));
                border: 2px solid var(--Victorian-brown);
                border-radius: 10px;
                padding: 25px;
                margin: 25px 0;
                position: relative;
            }}
            
            .commands-section::before {{
                content: 'üìã';
                position: absolute;
                top: -15px;
                left: 20px;
                background: var(--Victorian-brown);
                padding: 5px 10px;
                border-radius: 5px;
                font-size: 1.5em;
            }}
            
            .command-title {{
                font-family: 'Nosifer', cursive;
                color: var(--old-gold);
                font-size: 1.5em;
                margin-bottom: 15px;
                text-align: center;
                text-shadow: 2px 2px 5px rgba(0, 0, 0, 0.8);
            }}
            
            .command-item {{
                margin: 10px 0;
                padding: 8px 0;
                border-bottom: 1px dotted var(--mysterious-green);
            }}
            
            .command-code {{
                font-family: 'Courier New', monospace;
                background: rgba(47, 79, 79, 0.3);
                color: var(--old-gold);
                padding: 3px 8px;
                border-radius: 4px;
                border: 1px solid var(--mysterious-green);
                font-weight: bold;
            }}
            
            .command-desc {{
                color: #cccccc;
                margin-left: 10px;
            }}
            
            .security-notice {{
                background: linear-gradient(135deg, rgba(139, 0, 0, 0.2), rgba(0, 0, 0, 0.8));
                border: 2px solid var(--blood-red);
                border-radius: 10px;
                padding: 20px;
                margin: 20px 0;
                position: relative;
            }}
            
            .security-notice::before {{
                content: 'üîí';
                position: absolute;
                top: -15px;
                left: 20px;
                background: var(--blood-red);
                padding: 5px 10px;
                border-radius: 5px;
                font-size: 1.5em;
            }}
            
            .security-title {{
                font-family: 'Creepster', cursive;
                color: var(--blood-red);
                font-size: 1.3em;
                margin-bottom: 10px;
                text-shadow: 2px 2px 5px rgba(0, 0, 0, 0.8);
            }}
            
            .security-list {{
                list-style: none;
                padding: 0;
            }}
            
            .security-list li {{
                margin: 8px 0;
                padding-left: 20px;
                position: relative;
            }}
            
            .security-list li::before {{
                content: 'üõ°Ô∏è';
                position: absolute;
                left: 0;
                top: 0;
            }}
            
            .footer-signature {{
                text-align: center;
                margin-top: 40px;
                padding: 20px;
                font-family: 'UnifrakturMaguntia', cursive;
                color: var(--old-gold);
                font-size: 1.1em;
                text-shadow: 2px 2px 5px rgba(0, 0, 0, 0.8);
                border-top: 2px dotted var(--Victorian-brown);
            }}
            
            /* Responsive design */
            @media (max-width: 768px) {{
                .main-title {{
                    font-size: 2.5em;
                }}
                
                .subtitle {{
                    font-size: 1.2em;
                    letter-spacing: 1px;
                }}
                
                .status-grid {{
                    grid-template-columns: 1fr;
                }}
                
                .evidence-box {{
                    padding: 20px;
                }}
                
                .authorize-btn {{
                    font-size: 1.1em;
                    padding: 15px 30px;
                }}
            }}
        </style>
    </head>
    <body>
        <div class="detective-header">
            <h1 class="main-title">DETECTIVE BUREAU</h1>
            <p class="subtitle">~ Discord Authorization Portal ~</p>
        </div>
        
        <div class="container">
            <div class="evidence-box">
                <div class="warning-stamp">CONFIDENTIAL</div>
                <h2 class="case-file-header">üïµÔ∏è CASE FILE: DISCORD INFILTRATION </h2>
                <p style="font-size: 1.2em; line-height: 1.6; text-align: center; margin-bottom: 20px;">
                    Ch√†o m·ª´ng, ƒêi·ªáp vi√™n. H√£y c·∫•p quy·ªÅn truy c·∫≠p Discord cho bot ƒë·ªÉ b·∫Øt ƒë·∫ßu nhi·ªám v·ª• th√¢m nh·∫≠p tr√™n c√°c m√°y ch·ªß.
                </p>
                
                <div class="status-grid">
                    <div class="status-item">
                        <div class="status-label">üóÉÔ∏è Evidence Vault</div>
                        <div>{db_status}</div>
                    </div>
                    <div class="status-item">
                        <div class="status-label">üåê Shadow Network</div>
                        <div>{jsonbin_status}</div>
                    </div>
                </div>
                
                <a href="{auth_url}" class="authorize-btn">
                    üîê ƒêƒÇNG NH·∫¨P 
                </a>
            </div>
            
            <div class="commands-section">
                <h3 class="command-title">üîç M·∫¨T L·ªÜNH HI·ªÜN TR∆Ø·ªúNG</h3>
                <div class="command-item">
                    <span class="command-code">!auth</span>
                    <span class="command-desc">- Y√™u c·∫ßu th√¥ng tin ·ªßy quy·ªÅn</span>
                </div>
                <div class="command-item">
                    <span class="command-code">!add_me</span>
                    <span class="command-desc">- Tri·ªÉn khai ƒëi·ªáp vi√™n ƒë·∫øn t·∫•t c·∫£ m√°y ch·ªß</span>
                </div>
                <div class="command-item">
                    <span class="command-code">!check_token</span>
                    <span class="command-desc">- X√°c minh tr·∫°ng th√°i gi·∫•y ph√©p</span>
                </div>
                <div class="command-item">
                    <span class="command-code">!status</span>
                    <span class="command-desc">- B√°o c√°o ch·∫©n ƒëo√°n h·ªá th·ªëng</span>
                </div>
                <hr style="border: 1px solid var(--mysterious-green); margin: 15px 0; opacity: 0.5;">
                <p style="text-align: center; color: var(--old-gold); font-family: 'Creepster', cursive; font-size: 1.1em;">
                    <strong>üï¥Ô∏è L·ªÜNH D√ÄNH RI√äNG CHO CH·ªà HUY üï¥Ô∏è</strong>
                </p>
                <div class="command-item">
                    <span class="command-code">!invite &lt;Target_ID&gt;</span>
                    <span class="command-desc">- M·ªü menu ƒë·ªÉ ch·ªçn server m·ªùi v√†o</span>
                </div>
                <div class="command-item">
                    <span class="command-code">!force_add &lt;Target_ID&gt;</span>
                    <span class="command-desc">- Giao th·ª©c tri·ªÉn khai h√†ng lo·∫°t kh·∫©n c·∫•p</span>
                </div>
            </div>
            
            <div class="security-notice">
                <h3 class="security-title">üîí GIAO TH·ª®C B·∫¢O M·∫¨T TUY·ªÜT ƒê·ªêI</h3>
                <ul class="security-list">
                    <li>M·ªçi th√¥ng tin ƒë∆∞·ª£c m√£ h√≥a chu·∫©n qu√¢n s·ª±</li>
                    <li>Kh√¥ng l∆∞u tr·ªØ m·∫≠t kh·∫©u Discord trong kho l∆∞u tr·ªØ</li>
                    <li>Quy·ªÅn truy c·∫≠p t·ªëi thi·ªÉu cho c√°c ho·∫°t ƒë·ªông b√≠ m·∫≠t</li>
                    <li>L∆∞u tr·ªØ ƒë√°m m√¢y an to√†n v·ªõi h·ªá th·ªëng d·ª± ph√≤ng</li>
                </ul>
            </div>
            
            <div class="footer-signature">
                ~ Department of Digital Mysteries ~<br>
                <small style="font-family: 'Griffy', cursive; font-size: 0.9em;">
                    "In shadows we trust, through code we infiltrate"
                </small>
            </div>
        </div>
    </body>
    </html>
    '''

@app.route('/callback')
def callback():
    code = request.args.get('code')
    if not code:
        return "‚ùå Error: Authorization code not received from Discord.", 400

    token_url = 'https://discord.com/api/v10/oauth2/token'
    payload = {
        'client_id': CLIENT_ID,
        'client_secret': CLIENT_SECRET,
        'grant_type': 'authorization_code',
        'code': code,
        'redirect_uri': REDIRECT_URI,
    }
    headers = {'Content-Type': 'application/x-www-form-urlencoded'}

    token_response = requests.post(token_url, data=payload, headers=headers)
    if token_response.status_code != 200:
        return f"‚ùå L·ªói khi l·∫•y token: {token_response.text}", 500
    
    token_data = token_response.json()
    access_token = token_data['access_token']

    user_info_url = 'https://discord.com/api/v10/users/@me'
    headers = {'Authorization': f'Bearer {access_token}'}
    user_response = requests.get(user_info_url, headers=headers)
    
    if user_response.status_code != 200:
        return "‚ùå L·ªói: Kh√¥ng th·ªÉ l·∫•y th√¥ng tin ng∆∞·ªùi d√πng.", 500

    user_data = user_response.json()
    user_id = user_data['id']
    username = user_data['username']
    avatar_hash = user_data.get('avatar')
    
    # L∆∞u token v√†o c√°c storage systems
    success = save_user_token(user_id, access_token, username, avatar_hash)
    
    # Determine storage info
    storage_methods = []
    if get_db_connection():
        storage_methods.append("Evidence Vault (PostgreSQL)")
    if JSONBIN_API_KEY:
        storage_methods.append("Shadow Network (JSONBin.io)")
    if not storage_methods:
        storage_methods.append("Local Archive (JSON)")
    
    storage_info = " + ".join(storage_methods)

    return f'''
    <!DOCTYPE html>
    <html>
    <head>
        <title>Mission Accomplished - Detective Bureau</title>
        <style>
            @import url('https://fonts.googleapis.com/css2?family=Creepster&family=EB+Garamond:ital,wght@0,400;1,400&family=Nosifer&family=UnifrakturMaguntia&display=swap');
            
            :root {{
                --dark-fog: #1a1a1a;
                --deep-shadow: #0d0d0d;
                --blood-red: #8B0000;
                --old-gold: #DAA520;
                --mysterious-green: #2F4F2F;
                --london-fog: rgba(105, 105, 105, 0.3);
                --Victorian-brown: #654321;
                --success-green: #006400;
            }}
            
            * {{
                margin: 0;
                padding: 0;
                box-sizing: border-box;
            }}
            
            body {{
                font-family: 'EB Garamond', serif;
                background: linear-gradient(135deg, var(--deep-shadow) 0%, var(--dark-fog) 30%, #2c2c2c 70%, var(--deep-shadow) 100%);
                color: #e0e0e0;
                min-height: 100vh;
                position: relative;
                overflow-x: hidden;
                display: flex;
                align-items: center;
                justify-content: center;
            }}
            
            /* Mysterious background pattern */
            body::before {{
                content: '';
                position: fixed;
                top: 0;
                left: 0;
                width: 100%;
                height: 100%;
                background-image: 
                    radial-gradient(circle at 25% 25%, var(--london-fog) 2px, transparent 2px),
                    radial-gradient(circle at 75% 75%, var(--london-fog) 1px, transparent 1px);
                background-size: 50px 50px;
                opacity: 0.15;
                z-index: -1;
                animation: patternShift 30s linear infinite;
            }}
            
            @keyframes patternShift {{
                0% {{ transform: translateX(0) translateY(0); }}
                25% {{ transform: translateX(-25px) translateY(-25px); }}
                50% {{ transform: translateX(-50px) translateY(0); }}
                75% {{ transform: translateX(-25px) translateY(25px); }}
                100% {{ transform: translateX(0) translateY(0); }}
            }}
            
            /* Success fog effect */
            body::after {{
                content: '';
                position: fixed;
                bottom: -50px;
                left: -50px;
                width: 120%;
                height: 300px;
                background: linear-gradient(180deg, transparent 0%, rgba(0, 100, 0, 0.1) 50%, rgba(0, 100, 0, 0.2) 100%);
                z-index: -1;
                animation: successFogDrift 15s ease-in-out infinite;
            }}
            
            @keyframes successFogDrift {{
                0%, 100% {{ transform: translateX(-30px) translateY(10px); opacity: 0.2; }}
                50% {{ transform: translateX(30px) translateY(-10px); opacity: 0.4; }}
            }}
            
            .success-container {{
                background: linear-gradient(145deg, rgba(20, 20, 20, 0.95), rgba(40, 40, 40, 0.95));
                border: 3px solid var(--success-green);
                border-radius: 20px;
                padding: 50px;
                max-width: 700px;
                width: 90%;
                text-align: center;
                box-shadow: 
                    inset 0 0 50px rgba(0, 0, 0, 0.5),
                    0 20px 50px rgba(0, 0, 0, 0.8),
                    0 0 80px rgba(0, 100, 0, 0.2);
                position: relative;
                backdrop-filter: blur(10px);
            }}
            
            .success-container::before {{
                content: '';
                position: absolute;
                top: -3px;
                left: -3px;
                right: -3px;
                bottom: -3px;
                background: linear-gradient(45deg, var(--success-green), var(--old-gold), var(--success-green));
                border-radius: 20px;
                z-index: -1;
                opacity: 0.4;
                animation: borderGlow 3s ease-in-out infinite;
            }}
            
            @keyframes borderGlow {{
                0%, 100% {{ opacity: 0.4; }}
                50% {{ opacity: 0.8; }}
            }}
            
            .mission-stamp {{
                position: absolute;
                top: -20px;
                right: 30px;
                background: var(--success-green);
                color: white;
                padding: 10px 20px;
                border-radius: 0;
                transform: rotate(-8deg);
                font-family: 'EB Garamond', serif;
                font-weight: bold;
                font-size: 1.1em;
                box-shadow: 5px 5px 15px rgba(0, 0, 0, 0.7);
                border: 3px dashed white;
                animation: stampPulse 2s ease-in-out infinite;
            }}
            
            @keyframes stampPulse {{
                0%, 100% {{ transform: rotate(-8deg) scale(1); }}
                50% {{ transform: rotate(-8deg) scale(1.05); }}
            }}
            
            .success-icon {{
                font-size: 5em;
                margin-bottom: 20px;
                animation: victoryPulse 2s ease-in-out infinite;
                color: var(--success-green);
                text-shadow: 0 0 30px var(--success-green);
            }}
            
            @keyframes victoryPulse {{
                0%, 100% {{ transform: scale(1) rotate(0deg); }}
                25% {{ transform: scale(1.1) rotate(-5deg); }}
                50% {{ transform: scale(1.2) rotate(0deg); }}
                75% {{ transform: scale(1.1) rotate(5deg); }}
            }}
            
            .success-title {{
                font-family: 'UnifrakturMaguntia', cursive;
                font-size: 3em;
                color: var(--old-gold);
                text-shadow: 
                    3px 3px 0px var(--success-green),
                    6px 6px 15px rgba(0, 0, 0, 0.8),
                    0px 0px 40px rgba(218, 165, 32, 0.5);
                margin-bottom: 15px;
                animation: titleGlow 3s ease-in-out infinite alternate;
            }}
            
            @keyframes titleGlow {{
                from {{ text-shadow: 3px 3px 0px var(--success-green), 6px 6px 15px rgba(0, 0, 0, 0.8), 0px 0px 40px rgba(218, 165, 32, 0.5); }}
                to {{ text-shadow: 3px 3px 0px var(--success-green), 6px 6px 15px rgba(0, 0, 0, 0.8), 0px 0px 60px rgba(218, 165, 32, 0.8); }}
            }}
            
            .agent-welcome {{
                font-family: 'Creepster', cursive;
                font-size: 1.8em;
                color: var(--success-green);
                margin-bottom: 30px;
                text-shadow: 2px 2px 5px rgba(0, 0, 0, 0.8);
                animation: welcomeFlicker 4s ease-in-out infinite;
            }}
            
            @keyframes welcomeFlicker {{
                0%, 90%, 100% {{ opacity: 1; }}
                95% {{ opacity: 0.8; }}
            }}
            
            .info-classified {{
                background: linear-gradient(135deg, rgba(0, 100, 0, 0.2), rgba(0, 0, 0, 0.8));
                border: 2px solid var(--success-green);
                border-radius: 15px;
                padding: 25px;
                margin: 25px 0;
                position: relative;
            }}
            
            .info-classified::before {{
                content: 'üíæ';
                position: absolute;
                top: -18px;
                left: 25px;
                background: var(--success-green);
                padding: 8px 12px;
                border-radius: 8px;
                font-size: 1.5em;
            }}
            
            .classified-header {{
                font-family: 'Nosifer', cursive;
                color: var(--old-gold);
                font-size: 1.4em;
                margin-bottom: 15px;
                text-shadow: 2px 2px 5px rgba(0, 0, 0, 0.8);
            }}
            
            .storage-info {{
                background: linear-gradient(135deg, rgba(47, 79, 79, 0.3), rgba(20, 20, 20, 0.9));
                padding: 20px;
                border-radius: 10px;
                border: 1px solid var(--mysterious-green);
                margin: 15px 0;
                position: relative;
                overflow: hidden;
            }}
            
            .storage-info::before {{
                content: '';
                position: absolute;
                top: 0;
                left: -100%;
                width: 100%;
                height: 3px;
                background: var(--success-green);
                animation: secureTransfer 4s linear infinite;
            }}
            
            @keyframes secureTransfer {{
                0% {{ left: -100%; }}
                50% {{ left: 100%; }}
                100% {{ left: 100%; }}
            }}
            
            .next-steps {{
                background: linear-gradient(135deg, rgba(139, 0, 0, 0.2), rgba(0, 0, 0, 0.8));
                border: 2px solid var(--blood-red);
                border-radius: 15px;
                padding: 25px;
                margin: 25px 0;
                position: relative;
            }}
            
            .next-steps::before {{
                content: 'üöÄ';
                position: absolute;
                top: -18px;
                left: 25px;
                background: var(--blood-red);
                padding: 8px 12px;
                border-radius: 8px;
                font-size: 1.5em;
            }}
            
            .command-highlight {{
                font-family: 'Courier New', monospace;
                background: rgba(139, 0, 0, 0.3);
                color: var(--old-gold);
                padding: 5px 12px;
                border-radius: 6px;
                border: 2px solid var(--blood-red);
                font-weight: bold;
                font-size: 1.1em;
                display: inline-block;
                margin: 10px 5px;
                animation: commandPulse 3s ease-in-out infinite;
            }}
            
            @keyframes commandPulse {{
                0%, 100% {{ box-shadow: 0 0 10px rgba(139, 0, 0, 0.3); }}
                50% {{ box-shadow: 0 0 20px rgba(139, 0, 0, 0.6), inset 0 0 10px rgba(139, 0, 0, 0.2); }}
            }}
            
            .security-assurance {{
                background: linear-gradient(135deg, rgba(47, 79, 79, 0.2), rgba(0, 0, 0, 0.8));
                border: 2px solid var(--mysterious-green);
                border-radius: 15px;
                padding: 25px;
                margin: 25px 0;
                position: relative;
            }}
            
            .security-assurance::before {{
                content: 'üõ°Ô∏è';
                position: absolute;
                top: -18px;
                left: 25px;
                background: var(--mysterious-green);
                padding: 8px 12px;
                border-radius: 8px;
                font-size: 1.5em;
            }}
            
            .security-list {{
                list-style: none;
                padding: 0;
            }}
            
            .security-list li {{
                margin: 12px 0;
                padding-left: 25px;
                position: relative;
                color: #cccccc;
            }}
            
            .security-list li::before {{
                content: 'üîê';
                position: absolute;
                left: 0;
                top: 0;
            }}
            
            .signature-footer {{
                margin-top: 40px;
                padding-top: 25px;
                border-top: 3px dotted var(--Victorian-brown);
                font-family: 'UnifrakturMaguntia', cursive;
                color: var(--old-gold);
                font-size: 1.2em;
                text-shadow: 2px 2px 5px rgba(0, 0, 0, 0.8);
            }}
            
            /* Responsive design */
            @media (max-width: 768px) {{
                .success-container {{
                    padding: 30px;
                    width: 95%;
                }}
                
                .success-title {{
                    font-size: 2.2em;
                }}
                
                .agent-welcome {{
                    font-size: 1.4em;
                }}
                
                .success-icon {{
                    font-size: 4em;
                }}
            }}
        </style>
    </head>
    <body>
        <div class="success-container">
            <div class="mission-stamp">ƒê√É ·ª¶Y QUY·ªÄN</div>
            
            <div class="success-icon">‚úÖ</div>
            <h1 class="success-title">MISSION ACCOMPLISHED</h1>
            <p class="agent-welcome">Welcome to the Bureau, Agent <strong>{username}</strong>!</p>
            <p style="color: #b9bbbe; font-size: 1.1em; margin-top: -15px;">AGENT ID: <strong>{user_id}</strong></p>
            <div class="info-classified">
                <h3 class="classified-header">üîê ƒê√É B·∫¢O M·∫¨T TH√îNG TIN</h3>
                <div class="storage-info">
                    <strong>üìÅ L∆∞u tr·ªØ t·∫°i:</strong><br>
                    <span style="color: var(--success-green); font-weight: bold;">{storage_info}</span>
                </div>
            </div>
            
            <div class="next-steps">
                <h3 class="classified-header" style="color: var(--blood-red);">üéØ TRI·ªÇN KHAI T·ª®C TH·ªúI</h3>
                <p style="margin-bottom: 15px; color: #cccccc;">Gi·∫•y ph√©p c·ªßa b·∫°n ƒë√£ c√≥ hi·ªáu l·ª±c. Tri·ªÉn khai b·∫±ng l·ªánh:</p>
                <div class="command-highlight">!add_me</div>
                <p style="margin-top: 15px; color: #cccccc; font-size: 0.9em;">Th·ª±c thi l·ªánh n√†y ·ªü b·∫•t k·ª≥ k√™nh n√†o c√≥ s·ª± hi·ªán di·ªán c·ªßa bot gi√°m s√°t.</p>
            </div>
            
            <div class="security-assurance">
                <h3 class="classified-header" style="color: var(--mysterious-green);">üõ°Ô∏è GIAO TH·ª®C B·∫¢O M·∫¨T K√çCH HO·∫†T</h3>
                <ul class="security-list">
                    <li>Th√¥ng tin ƒë∆∞·ª£c m√£ h√≥a v·ªõi c·∫•p ƒë·ªô l∆∞·ª£ng t·ª≠</li>
                    <li>Kh√¥ng l∆∞u gi·ªØ m·∫≠t kh·∫©u Discord trong h·ªá th·ªëng</li>
                    <li>D·∫•u ch√¢n truy c·∫≠p t·ªëi thi·ªÉu cho ho·∫°t ƒë·ªông b√≠ m·∫≠t</li>
                    <li>H·ªá th·ªëng l∆∞u tr·ªØ ƒë√°m m√¢y an to√†n, ƒëa d·ª± ph√≤ng</li>
                </ul>
            </div>
            
            <div class="signature-footer">
                <p>~ Operation Successfully Initiated ~</p>
                <small style="font-family: 'Griffy', cursive; font-size: 0.8em; color: var(--mysterious-green);">
                    "Your digital identity is now part of our covert network"
                </small>
            </div>
        </div>
    </body>
    </html>
    '''

@app.route('/health')
def health():
    """Health check endpoint v·ªõi th√¥ng tin chi ti·∫øt"""
    db_connection = get_db_connection()
    db_status = db_connection is not None
    if db_connection:
        db_connection.close()
    
    # Test JSONBin connection
    jsonbin_status = False
    if JSONBIN_API_KEY and JSONBIN_BIN_ID:
        try:
            test_data = jsonbin_storage.read_data()
            jsonbin_status = True
        except:
            jsonbin_status = False
    
    return {
        "status": "ok", 
        "bot_connected": bot.is_ready(),
        "storage": {
            "database_connected": db_status,
            "jsonbin_configured": JSONBIN_API_KEY is not None,
            "jsonbin_working": jsonbin_status,
            "has_psycopg2": HAS_PSYCOPG2
        },
        "servers": len(bot.guilds) if bot.is_ready() else 0,
        "users": len(bot.users) if bot.is_ready() else 0
    }

# --- THREADING FUNCTION ---
def run_flask():
    """Ch·∫°y Flask server"""
    app.run(host='0.0.0.0', port=PORT, debug=False)

# --- MAIN EXECUTION ---
if __name__ == '__main__':
    print("üöÄ ƒêang kh·ªüi ƒë·ªông Discord Bot + Web Server...")
    print(f"üîß PORT: {PORT}")
    print(f"üîß Render URL: {RENDER_URL}")
    
    # Initialize database
    database_initialized = init_database()
    
    # Test JSONBin connection
    if JSONBIN_API_KEY:
        print("üåê Testing JSONBin.io connection...")
        try:
            test_data = jsonbin_storage.read_data()
            print(f"‚úÖ JSONBin.io connected successfully")
            if isinstance(test_data, dict) and len(test_data) > 0:
                print(f"üìä Found {len(test_data)} existing tokens in JSONBin")
        except Exception as e:
            print(f"‚ö†Ô∏è JSONBin.io connection issue: {e}")
    else:
        print("‚ö†Ô∏è JSONBin.io not configured")

    @bot.event
    async def setup_hook():
        """H√†m n√†y ƒë∆∞·ª£c g·ªçi t·ª± ƒë·ªông tr∆∞·ªõc khi bot ƒëƒÉng nh·∫≠p."""
        print("üîß ƒêang load c√°c module m·ªü r·ªông (cogs)...")
        try:
            await bot.load_extension('channel_tracker') # T√™n file m·ªõi kh√¥ng c√≥ .py
            print("‚úÖ ƒê√£ load th√†nh c√¥ng module 'channel_tracker'.")
        except Exception as e:
            print(f"‚ùå L·ªói khi load module 'channel_tracker': {e}")

    try:
        # Start Flask server in separate thread
        flask_thread = threading.Thread(target=run_flask, daemon=True)
        flask_thread.start()
        print(f"üåê Web server started on port {PORT}")
        
        # Wait for Flask to start
        time.sleep(2)
        
        # Start Discord bot in main thread
        print("ü§ñ Starting Discord bot...")
        bot.run(DISCORD_TOKEN)
        
    except Exception as e:
        print(f"‚ùå Startup error: {e}")
        print("üîÑ Keeping web server alive...")
        while True:
            time.sleep(60)












